<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>qizai</title>
  
  <subtitle>一个在IT行业摸爬打滚的程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-30T08:04:06.015Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>qizai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nagios</title>
    <link href="http://yoursite.com/2019/11/30/nagios/"/>
    <id>http://yoursite.com/2019/11/30/nagios/</id>
    <published>2019-11-30T08:00:00.000Z</published>
    <updated>2019-11-30T08:04:06.015Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="运维" scheme="http://yoursite.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="监控" scheme="http://yoursite.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>一分钟学会——永久设置pip指定国内镜像源(含Windows和Linux)</title>
    <link href="http://yoursite.com/2019/11/30/set-pip-proxy/"/>
    <id>http://yoursite.com/2019/11/30/set-pip-proxy/</id>
    <published>2019-11-30T07:49:53.000Z</published>
    <updated>2019-11-30T08:06:51.803Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>首先来看一下Python临时指定安装的镜像源：</p><h6 id="命令格式："><a href="#命令格式：" class="headerlink" title="命令格式："></a>命令格式：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install 包名 -i 镜像源url</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">sudo pip3 install redis -i http://pypi.douban.com/simple</span><br></pre></td></tr></table></figure><p>可能临时的指定镜像源安装已经不再符合你的口味了，因为每次安装都是要加上<code>-i xxxx</code>一大串，有点浪费生命啊,那么有没有永久设置镜像源的方法呢？那肯定有啊！下面来看一下呗~</p><a id="more"></a><h5 id="一、永久设置windows镜像源"><a href="#一、永久设置windows镜像源" class="headerlink" title="一、永久设置windows镜像源"></a>一、永久设置windows镜像源</h5><p>打开<code>windows</code>C盘，路径如下：<code>C:\Users\xxx(你的登录用户名)</code></p><p>无论你们电脑的pip版本是pip/pip2/pip3，都是创建pip文件夹，然后在文件夹里面创建pip.ini配置文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line"></span><br><span class="line">index-url = http://pypi.douban.com/simple</span><br><span class="line">trusted-host = pypi.douban.com</span><br><span class="line"></span><br><span class="line">;index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">;trusted-host = pypi.tuna.tsinghua.edu.cn</span><br><span class="line"></span><br><span class="line">timeout = 6000</span><br></pre></td></tr></table></figure><p>可以参考如下图：<br><img src="https://img-blog.csdnimg.cn/20190908104117779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="创建pip文件夹及pip.ini文件"></p><h5 id="二、Linux设置永久镜像源"><a href="#二、Linux设置永久镜像源" class="headerlink" title="二、Linux设置永久镜像源"></a>二、Linux设置永久镜像源</h5><p>先检查用户目录下是否存在目录.pip目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll  ~/.pip</span><br></pre></td></tr></table></figure></p><p>如果看出来是存在的，那么，切换到该目录下,并且创建pip.conf文件(存在直接修改即可)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.pip/</span><br><span class="line"></span><br><span class="line">vim ~/.pip/pip.conf</span><br><span class="line">里面的内容也是如下：</span><br><span class="line"></span><br><span class="line">------------------------------我是可爱的分割线开始处-----------------------------</span><br><span class="line">[global]</span><br><span class="line"></span><br><span class="line">index-url = http://pypi.douban.com/simple</span><br><span class="line">trusted-host = pypi.douban.com</span><br><span class="line"></span><br><span class="line">;index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">;trusted-host = pypi.tuna.tsinghua.edu.cn</span><br><span class="line"></span><br><span class="line">timeout = 6000</span><br><span class="line">-----------------------------我是可爱的分割线结束处------------------------------</span><br><span class="line"></span><br><span class="line">然后保存退出即可</span><br></pre></td></tr></table></figure><p>国内其他pip源</p><pre><code>清华：https://pypi.tuna.tsinghua.edu.cn/simple中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/华中理工大学：http://pypi.hustunique.com/山东理工大学：http://pypi.sdutlinux.org/豆瓣：http://pypi.douban.com/simple/</code></pre><p>注意：不管你用的是pip3还是pip，亦或是pip2，方法都是一样的，都是创建pip文件夹。</p><h5 id="感谢您的阅读"><a href="#感谢您的阅读" class="headerlink" title="感谢您的阅读"></a>感谢您的阅读</h5><p>先别走呗，这里有可能有你需要的文章：</p><blockquote><p><a href="https://blog.csdn.net/weixin_41173374/article/details/83472776" target="_blank" rel="noopener">python最好用的第三方库资源下载网址</a><br><a href="https://blog.csdn.net/weixin_41173374/article/details/81516304" target="_blank" rel="noopener">详细讲解aiohttp异步请求及使用，高效率</a><br><a href="https://blog.csdn.net/weixin_41173374/article/details/100053060" target="_blank" rel="noopener">CSS字体反爬实战，10分钟就能学会</a>；<br><a href="https://blog.csdn.net/weixin_41173374/article/details/99212145" target="_blank" rel="noopener">爬虫：js逆向目前遇到的知识点集合</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;首先来看一下Python临时指定安装的镜像源：&lt;/p&gt;&lt;h6 id=&quot;命令格式：&quot;&gt;&lt;a href=&quot;#命令格式：&quot; class=&quot;headerlink&quot; title=&quot;命令格式：&quot;&gt;&lt;/a&gt;命令格式：&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo pip3 install 包名 -i 镜像源url&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eg:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo pip3 install redis -i http://pypi.douban.com/simple&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可能临时的指定镜像源安装已经不再符合你的口味了，因为每次安装都是要加上&lt;code&gt;-i xxxx&lt;/code&gt;一大串，有点浪费生命啊,那么有没有永久设置镜像源的方法呢？那肯定有啊！下面来看一下呗~&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Pip" scheme="http://yoursite.com/tags/Pip/"/>
    
  </entry>
  
  <entry>
    <title>自动扫描当前Python项目，生成依赖清单</title>
    <link href="http://yoursite.com/2019/09/10/to-requeirements/"/>
    <id>http://yoursite.com/2019/09/10/to-requeirements/</id>
    <published>2019-09-10T03:11:11.000Z</published>
    <updated>2019-11-30T08:09:36.216Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Python项目生成requirements-txt文件之pipreqs的使用"><a href="#Python项目生成requirements-txt文件之pipreqs的使用" class="headerlink" title="Python项目生成requirements.txt文件之pipreqs的使用"></a>Python项目生成requirements.txt文件之pipreqs的使用</h5><p>使用pipreqs，这个工具的好处是可以通过对项目目录的扫描，发现使用了哪些库，生成依赖清单。</p><h6 id="1、先安装这个库："><a href="#1、先安装这个库：" class="headerlink" title="1、先安装这个库："></a>1、先安装这个库：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipreqs</span><br></pre></td></tr></table></figure><h5 id="2、使用方式"><a href="#2、使用方式" class="headerlink" title="2、使用方式"></a>2、使用方式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在项目的根目录下使用:</span><br><span class="line"></span><br><span class="line">pipreqs ./ --encoding=utf8</span><br></pre></td></tr></table></figure><a id="more"></a><h6 id="3、结果是：生成requirements-tx，可以根据这个文件下载所有依赖"><a href="#3、结果是：生成requirements-tx，可以根据这个文件下载所有依赖" class="headerlink" title="3、结果是：生成requirements.tx，可以根据这个文件下载所有依赖"></a>3、结果是：生成requirements.tx，可以根据这个文件下载所有依赖</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requriements.txt</span><br></pre></td></tr></table></figure><h5 id="感谢认真读完这篇教程的您"><a href="#感谢认真读完这篇教程的您" class="headerlink" title="感谢认真读完这篇教程的您"></a>感谢认真读完这篇教程的您</h5><p>先别走呗，这里有可能有你需要的文章：</p><blockquote><p><a href="https://blog.csdn.net/weixin_41173374/article/details/83472776" target="_blank" rel="noopener">python最好用的第三方库资源下载网址</a><br><a href="https://blog.csdn.net/weixin_41173374/article/details/81516304" target="_blank" rel="noopener">详细讲解aiohttp异步请求及使用，高效率</a><br><a href="https://blog.csdn.net/weixin_41173374/article/details/100053060" target="_blank" rel="noopener">CSS字体反爬实战，10分钟就能学会</a>；<br><a href="https://blog.csdn.net/weixin_41173374/article/details/99212145" target="_blank" rel="noopener">爬虫：js逆向目前遇到的知识点集合</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;Python项目生成requirements-txt文件之pipreqs的使用&quot;&gt;&lt;a href=&quot;#Python项目生成requirements-txt文件之pipreqs的使用&quot; class=&quot;headerlink&quot; title=&quot;Python项目生成requirements.txt文件之pipreqs的使用&quot;&gt;&lt;/a&gt;Python项目生成requirements.txt文件之pipreqs的使用&lt;/h5&gt;&lt;p&gt;使用pipreqs，这个工具的好处是可以通过对项目目录的扫描，发现使用了哪些库，生成依赖清单。&lt;/p&gt;&lt;h6 id=&quot;1、先安装这个库：&quot;&gt;&lt;a href=&quot;#1、先安装这个库：&quot; class=&quot;headerlink&quot; title=&quot;1、先安装这个库：&quot;&gt;&lt;/a&gt;1、先安装这个库：&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install pipreqs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&quot;2、使用方式&quot;&gt;&lt;a href=&quot;#2、使用方式&quot; class=&quot;headerlink&quot; title=&quot;2、使用方式&quot;&gt;&lt;/a&gt;2、使用方式&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;在项目的根目录下使用:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pipreqs ./ --encoding=utf8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="项目依赖" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96/"/>
    
  </entry>
  
  <entry>
    <title>必知必会:selenuim/pyppeteer模拟登陆防检测,能够屏蔽一小部分简单的检测</title>
    <link href="http://yoursite.com/2019/09/05/crack-selecnuim-or-pyppeteer/"/>
    <id>http://yoursite.com/2019/09/05/crack-selecnuim-or-pyppeteer/</id>
    <published>2019-09-04T16:56:05.000Z</published>
    <updated>2019-11-30T08:03:33.063Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>对于使用模拟登陆等操作来爬虫的手段，已经很容易被检测了，网上很多教程是说在网站所有js代码执行之前来执行下面几个js代码来到达效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">js1 = &apos;&apos;&apos;() =&gt;&#123;Object.defineProperties(navigator,&#123; webdriver:&#123; get: () =&gt; false&#125;&#125;)&#125;&apos;&apos;&apos;</span><br><span class="line">js2 = &apos;&apos;&apos;() =&gt; &#123;alert(window.navigator.webdriver)&#125;&apos;&apos;&apos;</span><br><span class="line">js3 = &apos;&apos;&apos;() =&gt; &#123;window.navigator.chrome = &#123;runtime: &#123;&#125;, &#125;; &#125;&apos;&apos;&apos;</span><br><span class="line">js4 = &apos;&apos;&apos;() =&gt;&#123;Object.defineProperty(navigator, &apos;languages&apos;, &#123;get: () =&gt; [&apos;en-US&apos;, &apos;en&apos;]&#125;);&#125;&apos;&apos;&apos;</span><br><span class="line">js5 = &apos;&apos;&apos;() =&gt;&#123;Object.defineProperty(navigator, &apos;plugins&apos;, &#123;get: () =&gt; [1, 2, 3, 4, 5,6],&#125;);&#125;&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><a id="more"></a><p>确实修改成功了。这种写法就万无一失了吗？并不是这样的，如果此时你在模拟浏览器中通过点击链接、输入网址进入另一个页面，或者开启新的窗口，你会发现，<code>window.navigator.webdriver</code>这个对象又变成true了，所以这样并非根治。</p><h5 id="最近看到两篇文章，说可以解除使用selenuim-pyppeteer模拟登录的检测，设置之后，网站压根检测不到是使用自动化工具操作的把柄，下来买介绍一下，这两个设置神方法。"><a href="#最近看到两篇文章，说可以解除使用selenuim-pyppeteer模拟登录的检测，设置之后，网站压根检测不到是使用自动化工具操作的把柄，下来买介绍一下，这两个设置神方法。" class="headerlink" title="最近看到两篇文章，说可以解除使用selenuim/pyppeteer模拟登录的检测，设置之后，网站压根检测不到是使用自动化工具操作的把柄，下来买介绍一下，这两个设置神方法。"></a>最近看到两篇文章，说可以解除使用selenuim/pyppeteer模拟登录的检测，设置之后，网站压根检测不到是使用自动化工具操作的把柄，下来买介绍一下，这两个设置神方法。</h5><h5 id="一、selenuim设置仿被检测"><a href="#一、selenuim设置仿被检测" class="headerlink" title="一、selenuim设置仿被检测"></a>一、selenuim设置仿被检测</h5><p>原理大概如下：在启动Chromedriver之前，为Chrome开启实验性功能参数 ==excludeSwitches==，它的==值为 [‘enable-automation’]==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from selenium.webdriver import Chrome, ChromeOptions</span><br><span class="line"></span><br><span class="line">option = ChromeOptions()</span><br><span class="line">option.add_experimental_option(&quot;excludeSwitches&quot;, [&quot;enable-automation&quot;])</span><br><span class="line">driver = Chrome(options=option)</span><br></pre></td></tr></table></figure><p>然后设置这个参数之后，Chrome浏览器会提示你，叫你“停用开发者模式运行的扩展程序”，这时候你不要点击“停用”，你只需要忽略它或者点击那个叉叉，把它关掉即可。</p><p>上面这个方法是能够有效根治这个被检测的问题。</p><h5 id="二、pyppeteer爬虫界新秀，设置仿被检测"><a href="#二、pyppeteer爬虫界新秀，设置仿被检测" class="headerlink" title="二、pyppeteer爬虫界新秀，设置仿被检测"></a>二、pyppeteer爬虫界新秀，设置仿被检测</h5><p>由于Selenium启动的Chrome中，有几十个特征可以被识别，所以在爬虫界已经没有以前那么受欢迎了。模拟浏览器的新秀Puppeteer异军突起，逐渐受到了爬虫界的关注。Puppeteer需要使用JavaScript来控制，如果你是用Python，那么就需要使用Pyppeteer.</p><p>如果你使用模拟浏览器爬淘宝，你会发现，无论怎么修改参数，Selenium总是可以立刻被识别。但是如果你使用了本文的方法，用Pyppeteer抓取淘宝，你就会发现另外一个广阔的天地。</p><p>写这篇文章的时候（2019-08-15），Pyppeteer的最新版本为0.0.25</p><h6 id="设置教程："><a href="#设置教程：" class="headerlink" title="设置教程："></a>设置教程：</h6><p>此时，你可以在PyCharm中，按住Command键（Windows、Linux用户按住Ctrl键），鼠标左键点击 frompyppeteerimportlaunch中的 launch，自动跳转到Pyppeteer源代码中的 launcher.py文件</p><p>把代码往上翻，在第61行左右，找到如下的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AUTOMATION_ARGS = [</span><br><span class="line">    &apos;--enable-automation&apos;,</span><br><span class="line">    &apos;--password-store=basic&apos;,</span><br><span class="line">    &apos;--use-mock-keychain&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>将其改成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AUTOMATION_ARGS = [</span><br><span class="line">    # &apos;--enable-automation&apos;,  # 注释掉可以设置window.nagivator.webdriver为undefined</span><br><span class="line">    &apos;--password-store=basic&apos;,</span><br><span class="line">    &apos;--use-mock-keychain&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>当你修改的时候，pycharm工具会提示你是否修改源码，选择<code>OK</code>即可,如果你想以后改回来也可以改回来，不过看官方的开源介绍，下一个版本0.0.26是支持通过传递参数来设置这些值的，所以让我们一起期待下一个版本呗！</p><h6 id="先别走呗，这里有可能有你需要的同类型的文章："><a href="#先别走呗，这里有可能有你需要的同类型的文章：" class="headerlink" title="先别走呗，这里有可能有你需要的同类型的文章："></a>先别走呗，这里有可能有你需要的同类型的文章：</h6><blockquote><p><a href="https://blog.csdn.net/weixin_41173374/article/details/83472776" target="_blank" rel="noopener">python最好用的第三方库资源下载网址</a><br><a href="https://blog.csdn.net/weixin_41173374/article/details/81516304" target="_blank" rel="noopener">详细讲解aiohttp异步请求及使用，高效率</a><br><a href="https://blog.csdn.net/weixin_41173374/article/details/100053060" target="_blank" rel="noopener">CSS字体反爬实战，10分钟就能学会</a>；<br><a href="https://blog.csdn.net/weixin_41173374/article/details/99212145" target="_blank" rel="noopener">爬虫：js逆向目前遇到的知识点集合</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;对于使用模拟登陆等操作来爬虫的手段，已经很容易被检测了，网上很多教程是说在网站所有js代码执行之前来执行下面几个js代码来到达效果：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;js1 = &amp;apos;&amp;apos;&amp;apos;() =&amp;gt;&amp;#123;Object.defineProperties(navigator,&amp;#123; webdriver:&amp;#123; get: () =&amp;gt; false&amp;#125;&amp;#125;)&amp;#125;&amp;apos;&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;js2 = &amp;apos;&amp;apos;&amp;apos;() =&amp;gt; &amp;#123;alert(window.navigator.webdriver)&amp;#125;&amp;apos;&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;js3 = &amp;apos;&amp;apos;&amp;apos;() =&amp;gt; &amp;#123;window.navigator.chrome = &amp;#123;runtime: &amp;#123;&amp;#125;, &amp;#125;; &amp;#125;&amp;apos;&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;js4 = &amp;apos;&amp;apos;&amp;apos;() =&amp;gt;&amp;#123;Object.defineProperty(navigator, &amp;apos;languages&amp;apos;, &amp;#123;get: () =&amp;gt; [&amp;apos;en-US&amp;apos;, &amp;apos;en&amp;apos;]&amp;#125;);&amp;#125;&amp;apos;&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;js5 = &amp;apos;&amp;apos;&amp;apos;() =&amp;gt;&amp;#123;Object.defineProperty(navigator, &amp;apos;plugins&amp;apos;, &amp;#123;get: () =&amp;gt; [1, 2, 3, 4, 5,6],&amp;#125;);&amp;#125;&amp;apos;&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="反爬虫" scheme="http://yoursite.com/categories/%E5%8F%8D%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="反爬虫" scheme="http://yoursite.com/tags/%E5%8F%8D%E7%88%AC%E8%99%AB/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CSS字体反爬实战，10分钟就能学会</title>
    <link href="http://yoursite.com/2019/09/03/crack-css/"/>
    <id>http://yoursite.com/2019/09/03/crack-css/</id>
    <published>2019-09-02T19:39:37.000Z</published>
    <updated>2019-11-30T08:09:06.867Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><h6 id="本次来解锁新姿势——CSS字体反爬。"><a href="#本次来解锁新姿势——CSS字体反爬。" class="headerlink" title="本次来解锁新姿势——CSS字体反爬。"></a>本次来解锁新姿势——CSS字体反爬。</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在解决这个字体反爬的路上，当我以为解决这个反爬手段的时候，</span><br><span class="line">最后验证总的答案的时候，被打脸了！！！</span><br><span class="line">又被默默设埋伏了，踩了一个坑，巨大的，为何悲伤辣么大 &lt;(－︿－)&gt;</span><br><span class="line">不将html源码页面下载下来还真发现不了在哪写错了，不多说，赶紧来看一下呗~~</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="0x01、分析目标网站"><a href="#0x01、分析目标网站" class="headerlink" title="0x01、分析目标网站"></a>0x01、分析目标网站</h5><ol><li><p>还是同样的手段，打开F12进行选中数字，查看它的标签内容是什么<br><img src="https://img-blog.csdnimg.cn/20190824142418441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>很明显，看了三个标签，只有第一个是对上的，其他两个是对不上的，难道是所有页面都是第一个对上，后面数字都打乱？并不是的，经过多次请求发现，每次都是随机打乱的，打乱的看起来好像没有规则。</p></li><li><p>那我也随便找找，看看有什么突破口不，首先去找id属性去全局搜索，看一下有什么相关内容<br><img src="https://img-blog.csdnimg.cn/20190824142453989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>出现关联的数据如下：<br><img src="https://img-blog.csdnimg.cn/20190824142527463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190824142717895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>出现的这两个东西，突然不知道是啥，那我就去谷歌一下呗，发现这两个是css知识里面的东西，又涨知识了</p></li></ol><blockquote><p>Tips：这些属性在文末有提到，可以翻到后面一起对照看</p></blockquote><ol><li>竟然没有什么突破口，那我继续搜索多几个看看<br><img src="https://img-blog.csdnimg.cn/20190824142816149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190824142829854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><ul><li>[x] 看，这个content:”202”不就是我们想要的吗，太爽了，终于找到一点点突破口了，谷歌百度一下这个:before你会发现它是CSS里面的属性</li></ul><ol><li><p>再继续找找其他的数字看看，比如看到这个数字128：<br><img src="https://img-blog.csdnimg.cn/20190824142920870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>搜索这个属性看看，又发现了两个属性：position、left。position顾名思义就是位置的属性，用relative表示，翻译过来就是相对位置的意思<br><img src="https://img-blog.csdnimg.cn/20190824142949733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>跟前端展示的综合起来，大概的意思就是：相对的位置，然后left表示偏移的方向及偏移多少，然后最终才是我们肉眼在前端看到的正确位置的数字，那开始造起来呗，<strong>just do IT</strong>！</p></li></ol><h5 id="0x02、核心代码"><a href="#0x02、核心代码" class="headerlink" title="0x02、核心代码"></a>0x02、核心代码</h5><h6 id="1-、下面代码就是核心判断字体是否是出现偏移或者是before属性的类型"><a href="#1-、下面代码就是核心判断字体是否是出现偏移或者是before属性的类型" class="headerlink" title="(1)、下面代码就是核心判断字体是否是出现偏移或者是before属性的类型"></a>(1)、下面代码就是核心判断字体是否是出现偏移或者是before属性的类型</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def parse_offset(div_list, response_str):</span><br><span class="line">    &quot;&quot;&quot;提取那种是偏移量的情况&quot;&quot;&quot;</span><br><span class="line">    if len(div_list) == 4:</span><br><span class="line">        real_div = div_list[1:]</span><br><span class="line">        num = [&quot;0&quot;, &quot;0&quot;, &quot;0&quot;]</span><br><span class="line">    else:</span><br><span class="line">        real_div = div_list</span><br><span class="line">        if len(real_div) == 3:</span><br><span class="line">            num = [&quot;0&quot;, &quot;0&quot;, &quot;0&quot;]  # 用来存储正确位置的数值，最后将它们用字符串连接起来，再转化为int</span><br><span class="line">        elif len(real_div) == 2:</span><br><span class="line">            num = [&quot;0&quot;, &quot;0&quot;]</span><br><span class="line">        elif len(real_div) == 1:</span><br><span class="line">            num = [&quot;0&quot;]</span><br><span class="line">            print(&quot;---特殊情况长度为:&#123;&#125;，直接就是原来标签内容real_div:&#123;&#125;&quot;.format(len(div_list), real_div))</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;----严重致命错误，real_div长度匹配不上，请检查.len(real_div):&#123;&#125;&quot;.format(len(real_div)))</span><br><span class="line">            num = []</span><br><span class="line">    pattern_left = r&quot;(?&lt;=.%s &#123; left:)(.*?)(?=em)&quot;  # 提取位移值</span><br><span class="line"></span><br><span class="line">    for index, div in enumerate(real_div):</span><br><span class="line">        class_name = div.xpath(&quot;./@class&quot;).extract_first(&quot;&quot;)</span><br><span class="line">        content = div.xpath(&quot;./text()&quot;).extract_first(&quot;&quot;)  # 提取数字</span><br><span class="line">        is_left = re.search(pattern_left%class_name, response_str, re.S)  # 偏移情况</span><br><span class="line"></span><br><span class="line">        if not is_left:  # 顺序完全一致的情况下，可以添加</span><br><span class="line">            num[index] = content</span><br><span class="line">            continue</span><br><span class="line">        else:  # 数值出现异位情况</span><br><span class="line">            left_num = int(is_left.group()) if is_left else None</span><br><span class="line">            if not left_num:</span><br><span class="line">                print(&quot;在匹配到位置的re对象不为空的情况下，为啥还是取不到位移值？请检查是否出现错误.class_name:&#123;&#125; num:&#123;&#125; re对象left_num:&#123;&#125;&quot;.format(class_name, num,left_num))</span><br><span class="line">                raise ValueError(&quot;获取偏移量的时候，出现异常,理论上这里是不会触发的，因为前面已经判断是已经有值了，所有这里是不会出现这种情况的&quot;)</span><br><span class="line">            num[index + left_num] = content</span><br><span class="line">    result = &quot;&quot;.join(num)</span><br><span class="line">    print(&quot;当前标签匹配最终结果如下 num:&#123;&#125; real_div:&#123;&#125; div_list:&#123;&#125;&quot;.format(num, real_div, div_list))</span><br><span class="line">    return int(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def parse_numbers(div_html, response_str):</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">    :param div_html: 传进来的xpath对象，div[@class=&apos;col-md-1&apos;]</span><br><span class="line">    :param response_str: html源码，也就是response.text</span><br><span class="line">    :return:int，返回当前div标签的真正数值</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    div_list = div_html.xpath(&quot;./div&quot;)  # 获取div[@class=&apos;col-md-1&apos;]下的所有div标签</span><br><span class="line"></span><br><span class="line">    if len(div_list) &lt; 3:  # todo: 长度小于3的(1和2)，若为2，那么提取第二个标签的值</span><br><span class="line">        div = div_list[-1]  # 取最后一个. 长度为1和2都是适用的</span><br><span class="line">        class_name = div.xpath(&quot;./@class&quot;).extract_first(&quot;&quot;)</span><br><span class="line">        pattern = &quot;(?&lt;=.%s:before &#123; content:\&quot;)(.*?)(?=\&quot;)&quot; % class_name  # .sklgp0fhDg:before &#123; content:&quot;116&quot; &#125;  这种情况就是</span><br><span class="line">        num = re.search(pattern, response_str, re.S)</span><br><span class="line">        num = num.group() if num else None</span><br><span class="line">        if not num:  # 当取不到值的时候，这里默认此时两位数的情况跟三位数的情况是一直的，就是出现位移的情况</span><br><span class="line">            num = parse_offset(div_list=div_list, response_str=response_str)</span><br><span class="line">        return int(num)</span><br><span class="line">    elif len(div_list) == 3 or len(div_list) == 4:   # todo: 长度为3的,这里是直接通过计算便宜量，复原数字;长度为4的就是直接就是有个div不展示</span><br><span class="line">        num = parse_offset(div_list=div_list, response_str=response_str)</span><br><span class="line">        return num</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;长度找不到匹配项.当前长度为:&#123;&#125; div_list:&#123;&#125;&quot;.format(len(div_list), div_list))</span><br><span class="line">        raise ValueError(&quot;长度找不到匹配项.当前长度为:&#123;&#125; div_list:&#123;&#125;&quot;.format(len(div_list), div_list))</span><br></pre></td></tr></table></figure><p>到此，我==以为==我是用正确的姿势==解决==这种问题了，可惜==并不是！！并不是！！！==<br>这中间我通过一边下载html源码一边慢慢核对前端展示的数值跟代码返回的是否一样的时候，当我发现有些两位数的数值出现匹配错误的情况，匹配出来是3位数，这到底为什么呢</p><h6 id="2-、下面将继续来看一下到底是为什么这样？"><a href="#2-、下面将继续来看一下到底是为什么这样？" class="headerlink" title="(2)、下面将继续来看一下到底是为什么这样？"></a>(2)、下面将继续来看一下到底是为什么这样？</h6><p>将这种特殊两位数的，匹配出三位数的情况，进行分析，搜索id属性<br><img src="https://img-blog.csdnimg.cn/20190824143408800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>这次又发现了一个属性，==<strong>opacity属性</strong>==，这个翻译过来是“不透明度”的意思，<a href="https://www.runoob.com/cssref/css3-pr-opacity.html" target="_blank" rel="noopener">点击我进行了解</a></li></ol><p>查看介绍，大概明白了，html源码可以通过设置元素的透明度，来达到前端肉眼是否看到的效果，如果设置为0则表示完全透明，为1则表示完全不透明</p><ol><li>下面我通过修改html源码的opacity属性进行剖析，发现设置opacity属性为0和1是得到不同的结果<br><img src="https://img-blog.csdnimg.cn/20190824143432189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190824143508360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>那为什么是重叠的呢？其实刚刚搜索出来的结果还有一个属性，叫==margin-right==，这个属性在CSS里面用来设置边距的，那么我们将原来的属性注释掉或者修改为0看看得到什么结果：<br><img src="https://img-blog.csdnimg.cn/20190824144003541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h6 id="3-、小结"><a href="#3-、小结" class="headerlink" title="(3)、小结"></a>(3)、小结</h6><ul><li>[x] <strong>来小结一下前面几个属性</strong><br>如果不是很明白那些属性，那么去谷歌或者百度一下，看看这些都是代表什么含义</li></ul></li></ol><div class="table-container"><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>width:2em</td><td>是字体宽度大小。    它是描述相对于应用在当前元素的字体尺寸，所以它也是相对长度单位。一般浏览器字体大小默认为16px，则2em == 32px；<a href="https://www.runoob.com/cssref/css-units.html" target="_blank" rel="noopener">详解</a></td></tr><tr><td>float:left</td><td>把图像向左浮动，<a href="https://www.runoob.com/cssref/pr-class-float.html" target="_blank" rel="noopener">详解</a></td></tr><tr><td>:before { content “202” }</td><td>:before 选择器向选定的元素前插入内容,使用content 属性来指定要插入的内容，<a href="https://www.runoob.com/cssref/sel-before.html" target="_blank" rel="noopener">详解</a></td></tr><tr><td>left:-2em</td><td>把当前元素向右移-2em单位，即等于向左移2em单位，<a href="https://www.runoob.com/cssref/pr-pos-left.html" target="_blank" rel="noopener">详解</a></td></tr><tr><td>opacity</td><td>透明度属性，取值范围为0-1,。为0表示完全透明，为1表示完全不透明，<a href="https://www.runoob.com/cssref/css3-pr-opacity.html" target="_blank" rel="noopener">详解</a></td></tr><tr><td>margin</td><td>外边距，<a href="https://www.runoob.com/css/css-margin.html" target="_blank" rel="noopener">详解</a></td></tr></tbody></table></div><p>总结一下这种CSS反爬手段解决顺序：</p><ol><li>首先判断元素是否透明：当我们遇到存在opacity属性为0的就是可以忽略它，不是0的就继续判断后面的</li><li>判断其大致规律性，如下(根据==不同网站==来设置，本文教程的大致规律性不一定符合所有CSS反爬手段的网站，需要==适当调整一下==)：<pre><code> div标签长度为3的可能：乱序的，或者顺序的，或者第一个标签是透明的，真正展示的应该是两位数字的； div标签长度为4的可能：有一个标签是不展示的，剩下三个标签是乱序的或者是顺序的（这个使用属于长度为3的情况去判断） div标签长度为2的可能：目前发现的，只有包含:before的div标签是可用的，另外一个标签的内容是可以忽略的</code></pre></li></ol><p>由于本文教程是，最后才发现opacity属性的，所以我代码里面并不是第一步判断opacity属性，但是我在总结的时候，个人推荐，先判断opacity属性，如果为透明的话，都可以直接跳过那个元素了</p><h6 id="4-、最终代码"><a href="#4-、最终代码" class="headerlink" title="(4)、最终代码"></a>(4)、最终代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : 2019/8/20 13:34</span><br><span class="line"># @Author  : qizai</span><br><span class="line"># @File    : crawl_decode_css.py</span><br><span class="line"># @Software: PyCharm</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">    # .jOjM12plqO &#123;position: relative&#125;  # 存在这种情况就是表示，是相对的位置，如果没有这个属性则表示不用调整位置</span><br><span class="line">    # .jOjM12plqO &#123;float: left&#125;  # 或者说，存在这种情况也可以是不用发生位移的，就是原位</span><br><span class="line">    # .jOjM12plqO &#123;left: 1em&#125;  # 存在这种情况就是，需要发生位移的，也可以使用这个来判断是否需要位移</span><br><span class="line">    # .jOjM12plqO &#123;width: 1em&#125; # 这个是没有参考价值的</span><br><span class="line">    # .huD10lVv &#123; opacity:0 &#125;  # 这个神坑的属性，是叫透明度，取值范围为0-1，为0表示完全透明，为1表示完全不透明，可为小数</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line">from scrapy import Selector</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def parse_offset(div_list, response_str):</span><br><span class="line">    &quot;&quot;&quot;这里是单独的提取出来的，专门是提取那种是偏移量的情况&quot;&quot;&quot;</span><br><span class="line">    if len(div_list) == 4:</span><br><span class="line">        real_div = div_list[1:]</span><br><span class="line">        num = [&quot;0&quot;, &quot;0&quot;, &quot;0&quot;]</span><br><span class="line">    else:</span><br><span class="line">        real_div = div_list</span><br><span class="line">        if len(real_div) == 3:</span><br><span class="line">            num = [&quot;0&quot;, &quot;0&quot;, &quot;0&quot;]  # 用来存储正确位置的数值，最后将它们用字符串连接起来，再转化为int</span><br><span class="line">        elif len(real_div) == 2:</span><br><span class="line">            num = [&quot;0&quot;, &quot;0&quot;]</span><br><span class="line">        elif len(real_div) == 1:</span><br><span class="line">            num = [&quot;0&quot;]</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;----严重致命错误，real_div长度匹配不上，请检查.len(real_div):&#123;&#125;&quot;.format(len(real_div)))</span><br><span class="line">            num = []</span><br><span class="line">    pattern_opacity = r&quot;.%s &#123; opacity:0 &#125;&quot;  # 出现opacity:0的表示完全透明，这时候不用理会这个字</span><br><span class="line">    pattern_left = r&quot;(?&lt;=.%s &#123; left:)(.*?)(?=em)&quot;  # 提取位移值</span><br><span class="line"></span><br><span class="line">    for index, div in enumerate(real_div):</span><br><span class="line">        # print(&quot;当前标签的num:&#123;&#125; index:&#123;&#125; div:&#123;&#125; real_div:&#123;&#125; div_list:&#123;&#125;&quot;.format(num, index, div, real_div, div_list))</span><br><span class="line">        class_name = div.xpath(&quot;./@class&quot;).extract_first(&quot;&quot;)</span><br><span class="line">        content = div.xpath(&quot;./text()&quot;).extract_first(&quot;&quot;)  # 提取数字</span><br><span class="line">        is_opacity = re.search(pattern_opacity % class_name, response_str, re.S)  # 是否为透明状态</span><br><span class="line">        is_left = re.search(pattern_left%class_name, response_str, re.S)  # 偏移情况</span><br><span class="line"></span><br><span class="line">        # 后来新增透明度判断</span><br><span class="line">        if is_opacity:</span><br><span class="line">            print(&quot;匹配到为完全透明的情况，请检查是否真的是完全透明，当前的class_name:&#123;&#125; num:&#123;&#125; num[&#123;&#125;]=&apos;-&apos;&quot;.format(class_name, num, index))</span><br><span class="line">            num[index] = &quot;-&quot;</span><br><span class="line">            continue</span><br><span class="line"></span><br><span class="line">        if not is_left:  # 顺序完全一致的情况下，可以添加</span><br><span class="line">            print(&quot;匹配不到偏移量，请检查是否真的是出现不偏移的情况，当前的class_name:&#123;&#125; num:&#123;&#125; num[&#123;&#125;]=&#123;&#125;&quot;.format(class_name, num, index, content))</span><br><span class="line">            num[index] = content</span><br><span class="line">            continue</span><br><span class="line">        else:  # 数值出现异位情况</span><br><span class="line">            left_num = int(is_left.group()) if is_left else None</span><br><span class="line">            if not left_num:</span><br><span class="line">                print(&quot;在匹配到位置的re对象不为空的情况下，为啥还是取不到位移值？请检查是否出现错误.class_name:&#123;&#125; num:&#123;&#125; re对象left_num:&#123;&#125;&quot;.format(class_name, num,left_num))</span><br><span class="line">                raise ValueError(&quot;获取偏移量的时候，出现异常,理论上这里是不会触发的，因为前面已经判断是已经有值了，所有这里是不会出现这种情况的&quot;)</span><br><span class="line">            num[index + left_num] = content</span><br><span class="line">    last_num = [i for i in num if i!=&quot;-&quot;]</span><br><span class="line">    result = &quot;&quot;.join(last_num)</span><br><span class="line">    print(&quot;当前标签匹配最终结果如下 num:&#123;&#125; real_div:&#123;&#125; div_list:&#123;&#125;&quot;.format(num, real_div, div_list))</span><br><span class="line">    return int(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def parse_numbers(div_html, response_str):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    :param div_html: 传进来的xpath对象，div[@class=&apos;col-md-1&apos;]</span><br><span class="line">    :param response_str: html源码，也就是response.text</span><br><span class="line">    :return:int，返回当前div标签的真正数值</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    div_list = div_html.xpath(&quot;./div&quot;)  # 获取div[@class=&apos;col-md-1&apos;]下的所有div标签</span><br><span class="line"></span><br><span class="line">    if len(div_list) &lt; 3:  # todo: 长度小于3的(1和2)，若为2，那么提取第二个标签的值</span><br><span class="line">        div = div_list[-1]  # 取最后一个. 长度为1和2都是适用的</span><br><span class="line">        class_name = div.xpath(&quot;./@class&quot;).extract_first(&quot;&quot;)</span><br><span class="line">        pattern = &quot;(?&lt;=.%s:before &#123; content:\&quot;)(.*?)(?=\&quot;)&quot; % class_name  # .sklgp0fhDg:before &#123; content:&quot;116&quot; &#125;  这种情况就是</span><br><span class="line">        num = re.search(pattern, response_str, re.S)</span><br><span class="line">        num = num.group() if num else None</span><br><span class="line">        if not num:  # 当取不到值的时候，这里默认此时两位数的情况跟三位数的情况是一直的，就是出现位移的情况</span><br><span class="line">            num = parse_offset(div_list=div_list, response_str=response_str)</span><br><span class="line">            print(&quot;[flag=2] num:&#123;&#125; 当前div长度小于3，但是处理的却是按照3/4的处理，返回的结果情况前面&quot;.format(num))</span><br><span class="line">        return int(num)</span><br><span class="line">    elif len(div_list) == 3 or len(div_list) == 4:   # todo: 长度为3的,这里是直接通过计算便宜量，复原数字;长度为4的就是直接就是有个div不展示</span><br><span class="line">        num = parse_offset(div_list=div_list, response_str=response_str)</span><br><span class="line">        print(&quot;len(div_list) == 3 or len(div_list) == 4的返回值num:&#123;&#125;&quot;.format(num))</span><br><span class="line">        return num</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;长度找不到匹配项.当前长度为:&#123;&#125; div_list:&#123;&#125;&quot;.format(len(div_list), div_list))</span><br><span class="line">        raise ValueError(&quot;长度找不到匹配项.当前长度为:&#123;&#125; div_list:&#123;&#125;&quot;.format(len(div_list), div_list))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_html():</span><br><span class="line">    url = &quot;xxxx&quot;</span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    selec = Selector(resp)</span><br><span class="line">    div_html = selec.xpath(&apos;//div[@class=&quot;col-md-1&quot;]&apos;)</span><br><span class="line">    for one in div_html:</span><br><span class="line">        real_num = parse_numbers(div_html=one, response_str=resp.text)</span><br><span class="line">        print(&quot;解析之后真正的num为:&#123;&#125;&quot;.format(real_num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    get_html()</span><br></pre></td></tr></table></figure><h5 id="至此本文教程写完了，希望能够帮助到各位在爬虫路上的小伙伴们，觉得不错点个赞呗"><a href="#至此本文教程写完了，希望能够帮助到各位在爬虫路上的小伙伴们，觉得不错点个赞呗" class="headerlink" title="至此本文教程写完了，希望能够帮助到各位在爬虫路上的小伙伴们，觉得不错点个赞呗"></a>至此本文教程写完了，希望能够帮助到各位在爬虫路上的小伙伴们，觉得不错点个赞呗</h5><h5 id="感谢认真读完这篇教程的您"><a href="#感谢认真读完这篇教程的您" class="headerlink" title="感谢认真读完这篇教程的您"></a>感谢认真读完这篇教程的您</h5><p>先别走呗，这里有可能有你需要的干货文章：</p><blockquote><p><a href="https://blog.csdn.net/weixin_41173374/article/details/100013167" target="_blank" rel="noopener">woff字体反爬实战，10分钟就能学会</a>；<br><a href="https://blog.csdn.net/weixin_41173374/article/details/99212145" target="_blank" rel="noopener">爬虫：js逆向目前遇到的知识点集合</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;h6 id=&quot;本次来解锁新姿势——CSS字体反爬。&quot;&gt;&lt;a href=&quot;#本次来解锁新姿势——CSS字体反爬。&quot; class=&quot;headerlink&quot; title=&quot;本次来解锁新姿势——CSS字体反爬。&quot;&gt;&lt;/a&gt;本次来解锁新姿势——CSS字体反爬。&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;在解决这个字体反爬的路上，当我以为解决这个反爬手段的时候，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;最后验证总的答案的时候，被打脸了！！！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;又被默默设埋伏了，踩了一个坑，巨大的，为何悲伤辣么大 &amp;lt;(－︿－)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不将html源码页面下载下来还真发现不了在哪写错了，不多说，赶紧来看一下呗~~&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="反爬虫" scheme="http://yoursite.com/categories/%E5%8F%8D%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="反爬虫" scheme="http://yoursite.com/tags/%E5%8F%8D%E7%88%AC%E8%99%AB/"/>
    
      <category term="字体反爬" scheme="http://yoursite.com/tags/%E5%AD%97%E4%BD%93%E5%8F%8D%E7%88%AC/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>爬虫：js逆向目前遇到的知识点集合</title>
    <link href="http://yoursite.com/2019/08/27/js-know/"/>
    <id>http://yoursite.com/2019/08/27/js-know/</id>
    <published>2019-08-27T07:31:38.000Z</published>
    <updated>2019-11-30T08:09:18.347Z</updated>
    
    <content type="html"><![CDATA[<h4 id="目前js逆向遇到的函数、解法或者其他注意事项集合"><a href="#目前js逆向遇到的函数、解法或者其他注意事项集合" class="headerlink" title="目前js逆向遇到的函数、解法或者其他注意事项集合"></a>目前js逆向遇到的函数、解法或者其他注意事项集合</h4><h5 id="0x01、Object-需要调用的函数名-参数-用法详解"><a href="#0x01、Object-需要调用的函数名-参数-用法详解" class="headerlink" title="0x01、Object(需要调用的函数名)(参数)用法详解"></a>0x01、Object(需要调用的函数名)(参数)用法详解</h5><p>后面的参数将传递到需要调用的函数名中，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// s.c对应e1    s.d对应e2   s.e对应sig</span><br><span class="line">// 这里注意一下：object(sig)(f)表示将f传递到sig里面去</span><br><span class="line">var f = Object(e1)(Object(e2)(JSON.stringify(l.payload))), p = Object(sig)(f);</span><br></pre></td></tr></table></figure></p><a id="more"></a><h5 id="0x02、js前加感叹号是什么意思？比如-function"><a href="#0x02、js前加感叹号是什么意思？比如-function" class="headerlink" title="0x02、js前加感叹号是什么意思？比如 !function(){}();"></a>0x02、js前加感叹号是什么意思？比如 !function(){}();</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">原文来源：https://blog.csdn.net/H_O_W_E/article/details/51388500</span><br><span class="line"></span><br><span class="line">内容如下：</span><br><span class="line"></span><br><span class="line">--------------------------我是可爱的分割线---------------------------------------------------</span><br><span class="line"></span><br><span class="line">此文出自 http://q.cnblogs.com/q/52920/</span><br><span class="line"></span><br><span class="line">感谢原创作者和转载者，感谢提问人和解答人。</span><br><span class="line"></span><br><span class="line">!function()&#123;&#125;();   !有什么用？</span><br><span class="line"></span><br><span class="line">从语法上来开，Javascript中分号表示语句结束，在开头加上，可能是为了压缩的时候和别的方法分割一下，表示一个新的语句开始。所以，如果在一个单独的JS文件中，开头的分号是没有任何意义的，可以删掉。</span><br><span class="line"></span><br><span class="line">叹号是逻辑运算符，是“非”的意思，常见这种写法 if(!true)&#123;&#125;；而将运算符加载函数定义的前面，则是将函数看做一个整体，然后再调用这个函数，并对返回的结构进行逻辑运算。</span><br><span class="line"></span><br><span class="line">说白了，此处就是构建了一个立即执行函数，建议楼主知道意思就可以，自己写的时候，可以使用更清晰的格式：</span><br><span class="line"></span><br><span class="line">(function()&#123;&#125;)();</span><br><span class="line"></span><br><span class="line">楼上已经给出很详细的解说了。</span><br><span class="line"></span><br><span class="line">这里补充一点：在函数声明【 function ()&#123;&#125; 】后面加【 () 】，意思是执行这个函数声明。有的叫法是“匿名自动执行函数”，更准确的表示应该为“立即执行函数”。</span><br><span class="line"></span><br><span class="line">但立即执行函数，要作为表达式的一部分才行，不然js解释器会报语法错误。一般，成为表达式的最容易理解方式是：在左右两端加一个圆括号，像这样【 (function ()&#123;&#125;) 】。所以，立即执行函数最常见的写法是【 (function ()&#123;&#125;)() 】，这是一个语句，在前面和后面都可以加【 ; 】。</span><br><span class="line"></span><br><span class="line">其实立即执行函数还有N种写法，比如【 (function ()&#123;&#125;) 】也行，在函数声明前加一元运算符也行：【 !function ()&#123;&#125;() 】、【 ~function ()&#123;&#125;() 】。甚至，对一元运算符进行组合也可以：【 !!!!function ()&#123;&#125;() 】、【 ~~~function ()&#123;&#125;() 】、【 !~!function ()&#123;&#125;() 】。</span><br></pre></td></tr></table></figure><h5 id="0x03、-function-win-window-这个js是什么意思？"><a href="#0x03、-function-win-window-这个js是什么意思？" class="headerlink" title="0x03、(function (win){}(window))这个js是什么意思？"></a>0x03、(function (win){}(window))这个js是什么意思？</h5><p>1、意思是，把window对象传入这个匿名函数中（即将window传给win），并且同时执行这个函数，==在页面载入之前就执行==；</p><p>2、小括号有返回值，也就是小括号内的函数或者表达式的返回值，所以说小括号内的function返回值等于小括号的返回值;</p><h5 id="0x04、window对象的某些用法转换为Nodejs的用法"><a href="#0x04、window对象的某些用法转换为Nodejs的用法" class="headerlink" title="0x04、window对象的某些用法转换为Nodejs的用法"></a>0x04、window对象的某些用法转换为Nodejs的用法</h5><p>1、对于一些window对象的用法，将js代码扣出来，在nodejs里是不能直接使用的，需要做相应的转换，例如下面这个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 源js代码</span><br><span class="line">window[&quot;String&quot;][&quot;fromCharCode&quot;](scHZjLUh1[&quot;charCodeAt&quot;](i)</span><br><span class="line"></span><br><span class="line"># 扣出来在本地webstorm+nodejs执行的代码</span><br><span class="line">String.fromCharCode((scHZjLUh1[&quot;charCodeAt&quot;](i))</span><br></pre></td></tr></table></figure><p>通过上面代码之间的转换，可以看出，window的某些用法可以在nodejs里面也能找到对应的写法</p><h5 id="0x05、Nodejs实现Base64编解码"><a href="#0x05、Nodejs实现Base64编解码" class="headerlink" title="0x05、Nodejs实现Base64编解码"></a>0x05、Nodejs实现Base64编解码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 用法一：</span><br><span class="line">Base64[&quot;decode&quot;](scHZjLUh1)  # 源js代码 </span><br><span class="line">Buffer.from(scHZjLUh1, &apos;base64&apos;).toString()  # 转换成nodejs代码</span><br><span class="line"></span><br><span class="line"># 用法二：</span><br><span class="line">window.atob([base64加密后的字符串])  # atob是解密base64字符串，成为普通字符串</span><br><span class="line">window.btoa([base64加密前的字符串])  # btoa是加密字符串，成为base64编码的字符串</span><br><span class="line"></span><br><span class="line">01、例子：</span><br><span class="line">源js代码也可能是使用window对象来构造的base64加解密，比如下面：</span><br><span class="line">window.atob(&quot;amF2YXNjcmlwdA==&quot;)  # 解码的结果是javascript</span><br><span class="line">转换为nodejs写法就是：</span><br><span class="line">Buffer.from(&quot;amF2YXNjcmlwdA==&quot;, &apos;base64&apos;).toString()  # nodejs的base64解码方式</span><br><span class="line"></span><br><span class="line">02、继续延伸：</span><br><span class="line">nodejs中base64加解密如下：</span><br><span class="line"></span><br><span class="line"># base64解密</span><br><span class="line">console.log(Buffer.from(&quot;SGVsbG8gV29ybGQ=&quot;, &apos;base64&apos;).toString(&apos;utf-8&apos;))</span><br><span class="line">Hello World</span><br><span class="line"></span><br><span class="line"># base64加密</span><br><span class="line">console.log(Buffer.from(&quot;Hello World&quot;).toString(&apos;base64&apos;));</span><br><span class="line">SGVsbG8gV29ybGQ=</span><br></pre></td></tr></table></figure><h5 id="至此本文教程写完了，希望能够帮助到各位在爬虫路上的小伙伴们，觉得不错点个赞呗"><a href="#至此本文教程写完了，希望能够帮助到各位在爬虫路上的小伙伴们，觉得不错点个赞呗" class="headerlink" title="至此本文教程写完了，希望能够帮助到各位在爬虫路上的小伙伴们，觉得不错点个赞呗"></a>至此本文教程写完了，希望能够帮助到各位在爬虫路上的小伙伴们，觉得不错点个赞呗</h5><h6 id="感谢认真读完这篇教程的您"><a href="#感谢认真读完这篇教程的您" class="headerlink" title="感谢认真读完这篇教程的您"></a>感谢认真读完这篇教程的您</h6><p>先别走呗，这里有可能有你需要的干货文章：</p><blockquote><p><a href="https://blog.csdn.net/weixin_41173374/article/details/100053060" target="_blank" rel="noopener">CSS字体反爬实战，10分钟就能学会</a>;<br><a href="https://blog.csdn.net/weixin_41173374/article/details/100013167" target="_blank" rel="noopener">woff字体反爬实战，10分钟就能学会</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;目前js逆向遇到的函数、解法或者其他注意事项集合&quot;&gt;&lt;a href=&quot;#目前js逆向遇到的函数、解法或者其他注意事项集合&quot; class=&quot;headerlink&quot; title=&quot;目前js逆向遇到的函数、解法或者其他注意事项集合&quot;&gt;&lt;/a&gt;目前js逆向遇到的函数、解法或者其他注意事项集合&lt;/h4&gt;&lt;h5 id=&quot;0x01、Object-需要调用的函数名-参数-用法详解&quot;&gt;&lt;a href=&quot;#0x01、Object-需要调用的函数名-参数-用法详解&quot; class=&quot;headerlink&quot; title=&quot;0x01、Object(需要调用的函数名)(参数)用法详解&quot;&gt;&lt;/a&gt;0x01、Object(需要调用的函数名)(参数)用法详解&lt;/h5&gt;&lt;p&gt;后面的参数将传递到需要调用的函数名中，如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// s.c对应e1    s.d对应e2   s.e对应sig&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 这里注意一下：object(sig)(f)表示将f传递到sig里面去&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var f = Object(e1)(Object(e2)(JSON.stringify(l.payload))), p = Object(sig)(f);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="反爬虫" scheme="http://yoursite.com/categories/%E5%8F%8D%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="反爬虫" scheme="http://yoursite.com/tags/%E5%8F%8D%E7%88%AC%E8%99%AB/"/>
    
      <category term="JS逆向" scheme="http://yoursite.com/tags/JS%E9%80%86%E5%90%91/"/>
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>woff字体反爬实战，10分钟就能学会(ttf字体同理)</title>
    <link href="http://yoursite.com/2019/08/26/crack-woff/"/>
    <id>http://yoursite.com/2019/08/26/crack-woff/</id>
    <published>2019-08-26T14:27:40.000Z</published>
    <updated>2019-11-30T08:08:16.557Z</updated>
    
    <content type="html"><![CDATA[<p>声明：本帖子仅是用于学习用途，请勿与用于恶意破坏别人网站，本人不承担法律责任。</p><p>来继续学爬虫呀！</p><h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><h6 id="简单描述一下这种手段，html源码的数字跟页面展示的数字是不一致的！当时就一脸黑人问号，嗯？？？"><a href="#简单描述一下这种手段，html源码的数字跟页面展示的数字是不一致的！当时就一脸黑人问号，嗯？？？" class="headerlink" title="简单描述一下这种手段，html源码的数字跟页面展示的数字是不一致的！当时就一脸黑人问号，嗯？？？"></a>简单描述一下这种手段，html源码的数字跟页面展示的数字是不一致的！当时就一脸黑人问号，嗯？？？</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">经过分析，当前这种字体反爬机制是：通过获取指定链接的woff字体文件，然后根据html源码的数字</span><br><span class="line">去woff字体文件里面查找真正的数字，讲到底就是一个映射关系/查找字典。如html源码是123，去woff文件里面</span><br><span class="line">查找出来的是：623。好了，看到这里，你一定想说：废话讲那么多干嘛？赶紧上教程啊！！</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="那先来看一下大致流程呗："><a href="#那先来看一下大致流程呗：" class="headerlink" title="那先来看一下大致流程呗："></a>那先来看一下大致流程呗：</h5><p><img src="https://img-blog.csdnimg.cn/20190826220504409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt></p><p>分析目标网站页面（在这里我不打算贴出网站地址，请大家自己找网站练习），这里看到html源码和页面展示的数字是不一致的，如下图：<br><img src="https://img-blog.csdnimg.cn/20190826220607308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tips：</span><br><span class="line">一开始不知道是怎么下手，只能谷歌搜索字体反爬，一搜果然很多说法，有说woff文件的、有说CSS的、还有说svg曲线啥的，</span><br><span class="line">然后我就去查看Network里面的All，就发现关键字眼woff，就开始猜测可能是属于这种类型的反爬手段，接着开始干活。</span><br></pre></td></tr></table></figure><h5 id="混淆前字体："><a href="#混淆前字体：" class="headerlink" title="混淆前字体："></a>混淆前字体：</h5><p><img src="https://img-blog.csdnimg.cn/20190826220646239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="混淆后的字体："><a href="#混淆后的字体：" class="headerlink" title="混淆后的字体："></a>混淆后的字体：</h5><p><img src="https://img-blog.csdnimg.cn/20190826220711496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="找了一会，发现-woff2文件和woff文件前后不一样，然后开始着手解决"><a href="#找了一会，发现-woff2文件和woff文件前后不一样，然后开始着手解决" class="headerlink" title="找了一会，发现.woff2文件和woff文件前后不一样，然后开始着手解决"></a>找了一会，发现.woff2文件和woff文件前后不一样，然后开始着手解决</h6><p><a href="https://pan.baidu.com/s/1YT1MF1cMfULl4yrJHXPoyg" target="_blank" rel="noopener">如需下载woff文件，请点击这里</a>， 提取码: ghnx</p><h6 id="但是本地打不开woff字体文件，需要借助的软件是fontcreator，这个你自己去找一下，很多破解的"><a href="#但是本地打不开woff字体文件，需要借助的软件是fontcreator，这个你自己去找一下，很多破解的" class="headerlink" title="但是本地打不开woff字体文件，需要借助的软件是fontcreator，这个你自己去找一下，很多破解的"></a>但是本地打不开woff字体文件，需要借助的软件是fontcreator，这个你自己去找一下，很多破解的</h6><p><img src="https://img-blog.csdnimg.cn/20190826220739753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但是这好像看不出什么，然后我们接着需要从另外一方面下手，重点来了》==将woff文件转换为xml文件==<br>如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"></span><br><span class="line">base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://xxxxxx.xxx.woff"</span></span><br><span class="line">    </span><br><span class="line">woff_dir = os.path.join(base_dir, <span class="string">"statics/woffs/"</span>)</span><br><span class="line">file_name = url.split(<span class="string">"/"</span>)[<span class="number">-1</span>]</span><br><span class="line">xml_name = file_name.replace(file_name.split(<span class="string">"."</span>)[<span class="number">-1</span>], <span class="string">"xml"</span>)</span><br><span class="line">save_woff = os.path.join(woff_dir, file_name)</span><br><span class="line">save_xml = os.path.join(woff_dir, xml_name)</span><br><span class="line"></span><br><span class="line">resp = requests.get(url=<span class="string">"xxx"</span>)</span><br><span class="line"><span class="keyword">with</span> open(save_woff, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(resp.content)</span><br><span class="line">    f.close()</span><br><span class="line">font = TTFont(save_woff)</span><br><span class="line">font.saveXML(save_xml)  <span class="comment"># 转换为xml文件</span></span><br></pre></td></tr></table></figure></p><p>然后打开xml文件看，先来查看一下缩略的内容，红色圈圈的那两个是本次重点破解的分析的内容：<br><img src="https://img-blog.csdnimg.cn/20190822133456757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="主要涉及内容破解版块"></p><p>然后先查看cmap，发现线索，里面注释的地方有标注了。然后我们大胆猜测：NINE对应的name=cid00018，code=0x39，这翻译过来就是9对应的name=cid00018，其id标记为0x39：<br><img src="https://img-blog.csdnimg.cn/20190826220839525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>接着来看一下code=0x39，其对应的name=cid00018，然后我们拿这个cid00018去搜索，发现在<glyphorder>部分里面看到：<br><code>&lt;GlyphID id=&quot;3&quot; name=&quot;cid00018&quot;/&gt;</code>，这表明什么呢？结合前后两个映射关系，然后连起来再大胆猜测一下，可能是9对应3？<br><img src="https://img-blog.csdnimg.cn/20190826221219906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>为了验证这个猜想，继续再找一下其他例子，我使用已经转换为如下格式，方便你们对比，你们也可以从三张截图来对比，哪三张截图呢？分别是：①是前面包含“code=0x39，name=cid00018”的截图；②是包含“id=3，name=cid00018”的截图；③是文章的第二张截图。<br>你们可以①②截图来一个个列出映射关系，建议先列出①的映射关系，再列出②的映射关系，然后再将①、②的映射关系组合起来，得出一个新的映射关系，这个新的映射关系就是我们所需的，下面来给你们看一下我提取的①、②的映射关系：</glyphorder></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">①的映射关系，在这里我定义为before_code_id</span><br><span class="line">②的映射关系，在这里我定义为affter_code_id,结果如下：</span><br><span class="line">before_code_id =  &#123;</span><br><span class="line">    &quot;0&quot;: &quot;cid00019&quot;,</span><br><span class="line">    &quot;1&quot;: &quot;cid00020&quot;,</span><br><span class="line">    &quot;2&quot;: &quot;cid00017&quot;,</span><br><span class="line">    &quot;3&quot;: &quot;cid00021&quot;,</span><br><span class="line">    &quot;4&quot;: &quot;cid00022&quot;,</span><br><span class="line">    &quot;5&quot;: &quot;cid00024&quot;,</span><br><span class="line">    &quot;6&quot;: &quot;cid00026&quot;,</span><br><span class="line">    &quot;7&quot;: &quot;cid00025&quot;,</span><br><span class="line">    &quot;8&quot;: &quot;cid00023&quot;,</span><br><span class="line">    &quot;9&quot;: &quot;cid00018&quot;</span><br><span class="line">&#125;</span><br><span class="line">affter_code_id = &#123;</span><br><span class="line">    &quot;cid00017&quot;: 2,</span><br><span class="line">    &quot;cid00018&quot;: 3,</span><br><span class="line">    &quot;cid00019&quot;: 4,</span><br><span class="line">    &quot;cid00020&quot;: 5,</span><br><span class="line">    &quot;cid00021&quot;: 6,</span><br><span class="line">    &quot;cid00022&quot;: 7,</span><br><span class="line">    &quot;cid00023&quot;: 8,</span><br><span class="line">    &quot;cid00024&quot;: 9,</span><br><span class="line">    &quot;cid00025&quot;: 10,</span><br><span class="line">    &quot;cid00026&quot;: 11</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">然后从html源码到before_code_id, affter_code_id应用起来就是如下：</span><br><span class="line">前端数字—中间人code—最终的数字，即：</span><br><span class="line">&quot;0&quot;——&quot;cid00019&quot;——4</span><br><span class="line">&quot;1&quot;——&quot;cid00020&quot;——5</span><br><span class="line">&quot;2&quot;——&quot;cid00017&quot;——2</span><br><span class="line">&quot;3&quot;——&quot;cid00021&quot;——6</span><br><span class="line">&quot;4&quot;——&quot;cid00022&quot;——7</span><br><span class="line">&quot;5&quot;——&quot;cid00024&quot;——9</span><br><span class="line">&quot;6&quot;——&quot;cid00026&quot;——11</span><br><span class="line">&quot;7&quot;——&quot;cid00025&quot;——10</span><br><span class="line">&quot;8&quot;——&quot;cid00023&quot;——8</span><br><span class="line">&quot;9&quot;——&quot;cid00018——3</span><br><span class="line"></span><br><span class="line">我们再简化一步，直接从html源码数字到最终的数字映射为如下(即直接省去中间的cidxxxxx这串)：</span><br><span class="line">&quot;0&quot;——4</span><br><span class="line">&quot;1&quot;——5</span><br><span class="line">&quot;2&quot;——2</span><br><span class="line">&quot;3&quot;——6</span><br><span class="line">&quot;4&quot;——7</span><br><span class="line">&quot;5&quot;——9</span><br><span class="line">&quot;6&quot;——11</span><br><span class="line">&quot;7&quot;——10</span><br><span class="line">&quot;8&quot;——8</span><br><span class="line">&quot;9&quot;——3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">但是你们发现这映射后的数字很奇怪吗，比如&quot;6&quot;、&quot;7&quot;映射之后分别为11和10，</span><br><span class="line">但是在我们的正常逻辑之中不对呀，要不我们再列一下html源码跟前端的肉眼看到的数字的映射关系呗：</span><br><span class="line">&quot;0&quot;——2</span><br><span class="line">&quot;1&quot;——3</span><br><span class="line">&quot;2&quot;——0</span><br><span class="line">&quot;3&quot;——4</span><br><span class="line">&quot;4&quot;——5</span><br><span class="line">&quot;5&quot;——7</span><br><span class="line">&quot;6&quot;——9</span><br><span class="line">&quot;7&quot;——8</span><br><span class="line">&quot;8&quot;——6</span><br><span class="line">&quot;9&quot;——1</span><br><span class="line">哇，这列出来之后不是很相似吗，跟前面的结果，要不我再放在一起给你们好对比一下呗：</span><br><span class="line">xml提取的映射     html源码跟网页展示的，提取的映射</span><br><span class="line">&quot;0&quot;——4&quot;0&quot;——2</span><br><span class="line">&quot;1&quot;——5&quot;1&quot;——3</span><br><span class="line">&quot;2&quot;——2&quot;2&quot;——0</span><br><span class="line">&quot;3&quot;——6&quot;3&quot;——4</span><br><span class="line">&quot;4&quot;——7&quot;4&quot;——5</span><br><span class="line">&quot;5&quot;——9&quot;5&quot;——7</span><br><span class="line">&quot;6&quot;——11&quot;6&quot;——9</span><br><span class="line">&quot;7&quot;——10&quot;7&quot;——8</span><br><span class="line">&quot;8&quot;——8&quot;8&quot;——6</span><br><span class="line">&quot;9&quot;——3&quot;9&quot;——1</span><br></pre></td></tr></table></figure><p>到此，我们发现从xml提取的映射跟html源码跟网页展示的提取的映射数值都是相差2，所以我们大胆猜测：网页上看到的数值是可以从xml提取的映射关系里面每个数字减去2所得的，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;0&quot;——4-2=2</span><br><span class="line">&quot;1&quot;——5--2=3</span><br><span class="line">&quot;2&quot;——2-2=0</span><br><span class="line">&quot;3&quot;——6-2=4</span><br><span class="line">&quot;4&quot;——7-2=5</span><br><span class="line">&quot;5&quot;——9-2=7</span><br><span class="line">&quot;6&quot;——11-2=9</span><br><span class="line">&quot;7&quot;——10-2=8</span><br><span class="line">&quot;8&quot;——8-2=6</span><br><span class="line">&quot;9&quot;——3-2=1</span><br></pre></td></tr></table></figure><p>所以这就是破解了嘛，到此，这个教程总可以理解吧，写得辣么辛苦、改的辣么辛苦，赶快评论点赞收藏一套走起来</p><p>好了，别嗨了，实操才是王道，下面来看一下核心代码，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : 2019/8/19 13:08</span><br><span class="line"># @Author  : qizai</span><br><span class="line"># @File    : crawl_woff.py</span><br><span class="line"># @Software: PyCharm</span><br><span class="line"></span><br><span class="line"># 先安装：pip3 install fontTools</span><br><span class="line">import os</span><br><span class="line">import requests</span><br><span class="line">from fake_useragent import UserAgent</span><br><span class="line">from fontTools.ttLib import TTFont  # 对字体文件进行格式转换</span><br><span class="line"></span><br><span class="line">base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">ua = UserAgent()</span><br><span class="line">header = &#123;</span><br><span class="line">    &quot;user-agent&quot;: ua.chrome,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def parse_woff(url=&quot;&quot;):</span><br><span class="line">    &quot;&quot;&quot;这里是下载字体并且解析对应的值&quot;&quot;&quot;</span><br><span class="line">    global cookie</span><br><span class="line">    global header</span><br><span class="line">    </span><br><span class="line">    woff_dir = os.path.join(base_dir, &quot;statics/woffs/&quot;)</span><br><span class="line">    file_name = url.split(&quot;/&quot;)[-1]</span><br><span class="line">    xml_name = file_name.replace(file_name.split(&quot;.&quot;)[-1], &quot;xml&quot;)</span><br><span class="line">    save_woff = os.path.join(woff_dir, file_name)</span><br><span class="line">    save_xml = os.path.join(woff_dir, xml_name)</span><br><span class="line"></span><br><span class="line">    if os.path.exists(save_woff):  # 存在本地的话直接提取本地的文件去解析即可省去下载，避免浪费资源</span><br><span class="line">        font = TTFont(save_woff)</span><br><span class="line">    else:</span><br><span class="line">        resp = requests.get(url=url, cookies=cookie, headers=header)</span><br><span class="line">        with open(save_woff, &quot;wb&quot;) as f:</span><br><span class="line">            f.write(resp.content)</span><br><span class="line">            f.close()</span><br><span class="line">        font = TTFont(save_woff)</span><br><span class="line">        font.saveXML(save_xml)  # 转换为xml文件</span><br><span class="line"></span><br><span class="line">    cmap = font.getBestCmap()  # 这个是xml源码里面的【数值-中间人code】映射，数值还不一定是html源码里面的数值，而是每位数经过加上一定的数值之后的</span><br><span class="line">    tmp = &#123;  # 这个是对应的才是我们需要的值,或者你也可以在每次获取的时候，将这个值对应减去48即可，就可以省去这这个映射</span><br><span class="line">        48: 0,  # html源码里面的0对应xml源码里面的48</span><br><span class="line">        49: 1,  # html源码里面的1对应xml源码里面的49</span><br><span class="line">        50: 2,  # html源码里面的2对应xml源码里面的50</span><br><span class="line">        51: 3,  # html源码里面的3对应xml源码里面的51</span><br><span class="line">        52: 4,  # html源码里面的4对应xml源码里面的52</span><br><span class="line">        53: 5,  # html源码里面的5对应xml源码里面的53</span><br><span class="line">        54: 6,  # html源码里面的6对应xml源码里面的54</span><br><span class="line">        55: 7,  # html源码里面的7对应xml源码里面的55</span><br><span class="line">        56: 8,  # html源码里面的8对应xml源码里面的56</span><br><span class="line">        57: 9,  # html源码里面的9对应xml源码里面的57</span><br><span class="line">    &#125;    # 注意：个人猜测以上这个tmp字典，xml源码的数字跟html源码数字的映射关系可能会定期改变的</span><br><span class="line"></span><br><span class="line">    before_code_id = &#123;&#125;  # 转换之后before_code_id为：1:cid00019  key就是html源码数字，value就是用来查询的中间人code</span><br><span class="line">    for k, v in cmap.items():</span><br><span class="line">        if k not in set(range(48, 58)):</span><br><span class="line">            continue</span><br><span class="line">        before_code_id[tmp.get(k)] = v  # 这一步其实是将49:cid00019的映射格式转换为好理解的1:cid00019映射关系</span><br><span class="line"></span><br><span class="line">    code_id_list = font.getGlyphOrder()[2:]  # 这个返回的值有11个，但是我这里只是取了第三个到最后一个，是用来取计算前端看到的真正的数值</span><br><span class="line">    affter_code_id = &#123;k:v for k,v in zip(code_id_list, range(2, 12))&#125;  # 将每一个按照顺序映射为cid00562:2这种</span><br><span class="line"></span><br><span class="line">    return before_code_id, affter_code_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    &quot;&quot;&quot;使用如下&quot;&quot;&quot;</span><br><span class="line">    before_code_id, affter_code_id = parse_woff(url=&quot;xxxx&quot;)</span><br><span class="line">    </span><br><span class="line">    # html源码数字：假设为0</span><br><span class="line">    html_number = 0</span><br><span class="line">    tmp_code = before_code_id.get(html_number)  # 先匹配中间人code</span><br><span class="line">    real_number = affter_code_id.get(tmp_code) - 2  # 再提取中间人code对应的真正的数字，记得要减去2，因为本来是每位数字已经多了2</span><br><span class="line">    print(&quot;当前html源码数字html_number:&#123;&#125; 真正的数字为real_number:&#123;&#125;&quot;.format(html_number, real_number))</span><br></pre></td></tr></table></figure></p><p>当前的woff字体反爬已经破解了，如果有不妥的地方请指出，大家一起学习。</p><h5 id="至此本文教程写完了，希望能够帮助到各位在爬虫路上的小伙伴们，觉得不错点个赞呗"><a href="#至此本文教程写完了，希望能够帮助到各位在爬虫路上的小伙伴们，觉得不错点个赞呗" class="headerlink" title="至此本文教程写完了，希望能够帮助到各位在爬虫路上的小伙伴们，觉得不错点个赞呗"></a>至此本文教程写完了，希望能够帮助到各位在爬虫路上的小伙伴们，觉得不错点个赞呗</h5><h5 id="感谢认真读完这篇教程的您"><a href="#感谢认真读完这篇教程的您" class="headerlink" title="感谢认真读完这篇教程的您"></a>感谢认真读完这篇教程的您</h5><p>先别走呗，这里有可能有你需要的文章：</p><blockquote><p><a href="https://blog.csdn.net/weixin_41173374/article/details/100053060" target="_blank" rel="noopener">CSS字体反爬实战，10分钟就能学会</a>；<br><a href="https://blog.csdn.net/weixin_41173374/article/details/99212145" target="_blank" rel="noopener">爬虫：js逆向目前遇到的知识点集合</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;声明：本帖子仅是用于学习用途，请勿与用于恶意破坏别人网站，本人不承担法律责任。&lt;/p&gt;&lt;p&gt;来继续学爬虫呀！&lt;/p&gt;&lt;h6 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h6&gt;&lt;h6 id=&quot;简单描述一下这种手段，html源码的数字跟页面展示的数字是不一致的！当时就一脸黑人问号，嗯？？？&quot;&gt;&lt;a href=&quot;#简单描述一下这种手段，html源码的数字跟页面展示的数字是不一致的！当时就一脸黑人问号，嗯？？？&quot; class=&quot;headerlink&quot; title=&quot;简单描述一下这种手段，html源码的数字跟页面展示的数字是不一致的！当时就一脸黑人问号，嗯？？？&quot;&gt;&lt;/a&gt;简单描述一下这种手段，html源码的数字跟页面展示的数字是不一致的！当时就一脸黑人问号，嗯？？？&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;经过分析，当前这种字体反爬机制是：通过获取指定链接的woff字体文件，然后根据html源码的数字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;去woff字体文件里面查找真正的数字，讲到底就是一个映射关系/查找字典。如html源码是123，去woff文件里面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;查找出来的是：623。好了，看到这里，你一定想说：废话讲那么多干嘛？赶紧上教程啊！！&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="反爬虫" scheme="http://yoursite.com/categories/%E5%8F%8D%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="反爬虫" scheme="http://yoursite.com/tags/%E5%8F%8D%E7%88%AC%E8%99%AB/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="字体反爬" scheme="http://yoursite.com/tags/%E5%AD%97%E4%BD%93%E5%8F%8D%E7%88%AC/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu系统下载路径(可以收藏免得以后再找)</title>
    <link href="http://yoursite.com/2019/08/10/download-ubuntu/"/>
    <id>http://yoursite.com/2019/08/10/download-ubuntu/</id>
    <published>2019-08-09T17:23:57.000Z</published>
    <updated>2019-11-30T08:05:40.567Z</updated>
    
    <content type="html"><![CDATA[<h6 id="Tips-这里只是记录一下找镜像资源的文档，嘻嘻-……"><a href="#Tips-这里只是记录一下找镜像资源的文档，嘻嘻-……" class="headerlink" title="Tips:这里只是记录一下找镜像资源的文档，嘻嘻(^^__^^) ……"></a>Tips:这里只是记录一下找镜像资源的文档，嘻嘻(<strong>^^__^^</strong>) ……</h6><h6 id="由于官网服务器在国外，下载速度奇慢，所以我们可以利用阿里云镜像下载ubuntu"><a href="#由于官网服务器在国外，下载速度奇慢，所以我们可以利用阿里云镜像下载ubuntu" class="headerlink" title="由于官网服务器在国外，下载速度奇慢，所以我们可以利用阿里云镜像下载ubuntu"></a>由于官网服务器在国外，下载速度奇慢，所以我们可以利用阿里云镜像下载ubuntu</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ubuntu 14.04：</span><br><span class="line">http://mirrors.aliyun.com/ubuntu-releases/14.04/</span><br><span class="line"></span><br><span class="line">ubuntu 16.04：</span><br><span class="line">http://mirrors.aliyun.com/ubuntu-releases/16.04/</span><br><span class="line"></span><br><span class="line">ubuntu 18.04：</span><br><span class="line">http://mirrors.aliyun.com/ubuntu-releases/18.04/</span><br></pre></td></tr></table></figure><a id="more"></a><p>没错，只要市面上存在的版本，阿里云镜像基本都有，下载速度可以达到3M/s<br>转</p><h6 id="————————————————————-我是可爱的分隔线———————————————————————————"><a href="#————————————————————-我是可爱的分隔线———————————————————————————" class="headerlink" title="————————————————————-我是可爱的分隔线———————————————————————————"></a>————————————————————-我是可爱的分隔线———————————————————————————</h6><h6 id="其他国内镜像资源路径url如下："><a href="#其他国内镜像资源路径url如下：" class="headerlink" title="其他国内镜像资源路径url如下："></a>其他国内镜像资源路径url如下：</h6><p>可以先按国家语言选，再按大学找即可：<br>常用：清华大学(Tsinghua University)、上海交大(Shanghai Jiao Tong University)，华为云(HUAWEI CLOUD)等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://launchpad.net/ubuntu/+cdmirrors</span><br></pre></td></tr></table></figure></p><p>参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">镜像：</span><br><span class="line">https://blog.csdn.net/qq_35315454/article/details/82904997</span><br><span class="line"></span><br><span class="line">镜像及安装：</span><br><span class="line">https://blog.csdn.net/weixin_43379278/article/details/88817546</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;Tips-这里只是记录一下找镜像资源的文档，嘻嘻-……&quot;&gt;&lt;a href=&quot;#Tips-这里只是记录一下找镜像资源的文档，嘻嘻-……&quot; class=&quot;headerlink&quot; title=&quot;Tips:这里只是记录一下找镜像资源的文档，嘻嘻(^^__^^) ……&quot;&gt;&lt;/a&gt;Tips:这里只是记录一下找镜像资源的文档，嘻嘻(&lt;strong&gt;^^__^^&lt;/strong&gt;) ……&lt;/h6&gt;&lt;h6 id=&quot;由于官网服务器在国外，下载速度奇慢，所以我们可以利用阿里云镜像下载ubuntu&quot;&gt;&lt;a href=&quot;#由于官网服务器在国外，下载速度奇慢，所以我们可以利用阿里云镜像下载ubuntu&quot; class=&quot;headerlink&quot; title=&quot;由于官网服务器在国外，下载速度奇慢，所以我们可以利用阿里云镜像下载ubuntu&quot;&gt;&lt;/a&gt;由于官网服务器在国外，下载速度奇慢，所以我们可以利用阿里云镜像下载ubuntu&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ubuntu 14.04：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http://mirrors.aliyun.com/ubuntu-releases/14.04/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ubuntu 16.04：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http://mirrors.aliyun.com/ubuntu-releases/16.04/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ubuntu 18.04：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http://mirrors.aliyun.com/ubuntu-releases/18.04/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Ubuntu镜像资源" scheme="http://yoursite.com/categories/Ubuntu%E9%95%9C%E5%83%8F%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="Ubuntu镜像资源" scheme="http://yoursite.com/tags/Ubuntu%E9%95%9C%E5%83%8F%E8%B5%84%E6%BA%90/"/>
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>从pdf提取图片，有两个库可以提取fitz（要install pymupdf）、pdfminer（install pdfminer3k）</title>
    <link href="http://yoursite.com/2019/08/06/extract-pdf/"/>
    <id>http://yoursite.com/2019/08/06/extract-pdf/</id>
    <published>2019-08-06T13:19:38.000Z</published>
    <updated>2019-11-30T08:05:21.117Z</updated>
    
    <content type="html"><![CDATA[<p>前言:下面的代码有注释，下面的也是参考别人的，但是忘记来源了，因为时间隔太久了，哪位小伙伴看到了，可以提一下链接</p><h6 id="方法一，这个测试是有用的，fitz（要install-pymupdf）"><a href="#方法一，这个测试是有用的，fitz（要install-pymupdf）" class="headerlink" title="方法一，这个测试是有用的，fitz（要install pymupdf）"></a>方法一，这个测试是有用的，fitz（要install pymupdf）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : 2019/3/19 08:51</span><br><span class="line"># @Author  : qizai</span><br><span class="line"># @File    : fetch_pdf_v1.py</span><br><span class="line"># @Software: PyCharm</span><br><span class="line"></span><br><span class="line">import fitz  # pip3 install pymupdf</span><br><span class="line">import time</span><br><span class="line">import re</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_image(path, pic_path):</span><br><span class="line">    &apos;&apos;&apos;从pdf中提取图片</span><br><span class="line">    :param path: pdf的路径</span><br><span class="line">    :param pic_path: 图片保存的路径</span><br><span class="line">    :return: 无return</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    t0 = time.clock()</span><br><span class="line">    # 00、使用正则表达式查找PDF中的图片</span><br><span class="line">    checkXO = r&quot;/Type(?= */XObject)&quot;</span><br><span class="line">    checkIM = r&quot;/Subtype(?= */Image)&quot;</span><br><span class="line"></span><br><span class="line">    # 一、打开pdf，打印PDF的相关信息</span><br><span class="line">    doc = fitz.open(path)</span><br><span class="line">    # 图片计数</span><br><span class="line">    imgcount = 0</span><br><span class="line">    lenXREF = doc._getXrefLength()</span><br><span class="line"></span><br><span class="line">    # 打印PDF的信息</span><br><span class="line">    print(&quot;文件名:&#123;&#125;, 页数: &#123;&#125;, 对象: &#123;&#125;&quot;.format(path, len(doc), lenXREF - 1))</span><br><span class="line"></span><br><span class="line">    # 二、遍历PDF中的对象，遇到是图像才进行下一步，不然就continue</span><br><span class="line">    for i in range(1, lenXREF):</span><br><span class="line">        # 定义对象字符串</span><br><span class="line">        # text = doc._getObjectString(i)</span><br><span class="line">        text = doc._getXrefString(i)</span><br><span class="line">        # print(text)</span><br><span class="line">        # continue</span><br><span class="line">        isXObject = re.search(checkXO, text)</span><br><span class="line">        # 使用正则表达式查看是否是图片</span><br><span class="line">        isImage = re.search(checkIM, text)</span><br><span class="line">        # 如果不是对象也不是图片，则continue</span><br><span class="line">        if not isXObject or not isImage:</span><br><span class="line">            print(&quot;不是图片&quot;)</span><br><span class="line">            continue</span><br><span class="line">        imgcount += 1</span><br><span class="line">        # 根据索引生成图像</span><br><span class="line">        pix = fitz.Pixmap(doc, i)</span><br><span class="line">        # 根据pdf的路径生成图片的名称</span><br><span class="line">        new_name = path.replace(&apos;\\&apos;, &apos;_&apos;) + &quot;_img&#123;&#125;.png&quot;.format(imgcount)</span><br><span class="line">        new_name = new_name.replace(&apos;:&apos;, &apos;&apos;)</span><br><span class="line"></span><br><span class="line">        # 三、将图像存为png格式</span><br><span class="line">        # 如果pix.n&lt;5,可以直接存为PNG</span><br><span class="line">        if pix.n &lt; 5:</span><br><span class="line">            pix.writePNG(os.path.join(pic_path, new_name))</span><br><span class="line">        # 否则先转换CMYK</span><br><span class="line">        else:</span><br><span class="line">            pix0 = fitz.Pixmap(fitz.csRGB, pix)</span><br><span class="line">            pix0.writePNG(os.path.join(pic_path, new_name))</span><br><span class="line">            pix0 = None</span><br><span class="line">        # 释放资源</span><br><span class="line">        pix = None</span><br><span class="line">    t1 = time.clock()</span><br><span class="line">    print(&quot;运行时间:&#123;&#125;s&quot;.format(t1 - t0))</span><br><span class="line">    print(&quot;提取了&#123;&#125;张图片&quot;.format(imgcount))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 运行</span><br><span class="line">if __name__==&apos;__main__&apos;:</span><br><span class="line">    # pdf路径</span><br><span class="line">    path = r&quot;Selenium 自动化爬虫.pdf&quot;  # 测试提取图片专用  Selenium 自动化爬虫</span><br><span class="line">    pic_path = r&quot;image&quot;</span><br><span class="line">    # 创建保存图片的文件夹</span><br><span class="line">    if os.path.exists(pic_path):</span><br><span class="line">        print(&quot;文件夹已存在，请重新创建新文件夹！&quot;)</span><br><span class="line">        raise SystemExit</span><br><span class="line">    else:</span><br><span class="line">        os.mkdir(pic_path)</span><br><span class="line">    get_image(path, pic_path)</span><br></pre></td></tr></table></figure><a id="more"></a><h6 id="方法二、pdfminer（install-pdfminer3k）这个提取文字还可以，提取图片暂时识别不了"><a href="#方法二、pdfminer（install-pdfminer3k）这个提取文字还可以，提取图片暂时识别不了" class="headerlink" title="方法二、pdfminer（install pdfminer3k）这个提取文字还可以，提取图片暂时识别不了"></a>方法二、pdfminer（install pdfminer3k）这个提取文字还可以，提取图片暂时识别不了</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : 2019/3/19 11:21</span><br><span class="line"># @Author  : qizai</span><br><span class="line"># @File    : fetch_pdf_v2.py</span><br><span class="line"># @Software: PyCharm</span><br><span class="line"></span><br><span class="line">from pdfminer.pdfparser import PDFParser, PDFDocument</span><br><span class="line">from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter, PDFTextExtractionNotAllowed</span><br><span class="line">from pdfminer.converter import PDFPageAggregator</span><br><span class="line">from pdfminer.layout import LTTextBoxHorizontal, LAParams, LTImage, LTCurve, LTFigure</span><br><span class="line"></span><br><span class="line"># 如果要提取图片，那么需要导入一下几个库</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">from binascii import b2a_hex</span><br><span class="line"></span><br><span class="line">images_folder = r&apos;image&apos;  # 提取图片存放的路径</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def save_image(lt_image, page_number, images_folder):</span><br><span class="line">    &quot;&quot;&quot;Try to save the image data from this LTImage object, and return the file name, if successful</span><br><span class="line">    从LTImage object中保存图像数据，这需要依赖两个函数determine_image_type、write_file</span><br><span class="line">    :return file_name 文件名</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    result = None</span><br><span class="line">    if lt_image.stream:</span><br><span class="line">        file_stream = lt_image.stream.get_rawdata()</span><br><span class="line">        file_ext = determine_image_type(file_stream[0:4])</span><br><span class="line">    if file_ext:</span><br><span class="line">        file_name = &apos;&apos;.join([str(page_number), &apos;_&apos;, lt_image.name, file_ext])</span><br><span class="line">    if write_file(images_folder, file_name, lt_image.stream.get_rawdata(), flags=&apos;wb&apos;):</span><br><span class="line">        result = file_name</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def determine_image_type (stream_first_4_bytes):</span><br><span class="line">    &quot;&quot;&quot;Find out the image file type based on the magic number comparison of the first 4 (or 2) bytes&quot;&quot;&quot;</span><br><span class="line">    file_type = None</span><br><span class="line">    bytes_as_hex = b2a_hex(stream_first_4_bytes)</span><br><span class="line">    if bytes_as_hex.startswith(&apos;ffd8&apos;):</span><br><span class="line">        file_type = &apos;.jpeg&apos;</span><br><span class="line">    elif bytes_as_hex == &apos;89504e47&apos;:</span><br><span class="line">        file_type = &apos;,png&apos;</span><br><span class="line">    elif bytes_as_hex == &apos;47494638&apos;:</span><br><span class="line">        file_type = &apos;.gif&apos;</span><br><span class="line">    elif bytes_as_hex.startswith(&apos;424d&apos;):</span><br><span class="line">        file_type = &apos;.bmp&apos;</span><br><span class="line">    return file_type</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def write_file(folder, filename, filedata, flags=&apos;w&apos;):</span><br><span class="line">    &quot;&quot;&quot;Write the file data to the folder and filename combination</span><br><span class="line">    (flags: &apos;w&apos; for write text, &apos;wb&apos; for write binary, use &apos;a&apos; instead of &apos;w&apos; for append)</span><br><span class="line">    :param flags:写入文件格式(w,wb,a) floder</span><br><span class="line">    将文件数据写入文件夹和文件名组合</span><br><span class="line">    :return</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    result = False</span><br><span class="line">    if os.path.isdir(folder):</span><br><span class="line">        try:</span><br><span class="line">            file_obj = open(os.path.join(folder, filename), flags)</span><br><span class="line">            file_obj.write(filedata)</span><br><span class="line">            file_obj.close()</span><br><span class="line">            result = True</span><br><span class="line">        except IOError as e:</span><br><span class="line">            print(&quot;报错了,报错信息如下:\n&#123;&#125;&quot;.format(e))</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_read(path, toPath, image_path):</span><br><span class="line">    # 以二进制形式打开pdf文件</span><br><span class="line">    with open(path, &quot;rb&quot;) as f:</span><br><span class="line">        # 创建一个pdf文档分析器</span><br><span class="line">        parser = PDFParser(f)</span><br><span class="line">        # 创建pdf文档</span><br><span class="line">        pdfFile = PDFDocument()</span><br><span class="line">        # 链接分析器与文档对象</span><br><span class="line">        parser.set_document(pdfFile)</span><br><span class="line">        pdfFile.set_parser(parser)</span><br><span class="line">        # 提供初始化密码</span><br><span class="line">        pdfFile.initialize()</span><br><span class="line">        # 检测文档是否提供txt转换</span><br><span class="line">    if not pdfFile.is_extractable:</span><br><span class="line">        print(&quot;不提供txt转换&quot;)</span><br><span class="line">        raise PDFTextExtractionNotAllowed</span><br><span class="line">    else:</span><br><span class="line">        # 解析数据</span><br><span class="line">        # 数据管理</span><br><span class="line">        manager = PDFResourceManager()</span><br><span class="line">        # 创建一个PDF设备对象</span><br><span class="line">        laparams = LAParams()</span><br><span class="line">        device = PDFPageAggregator(manager, laparams=laparams)</span><br><span class="line">        # 解释器对象</span><br><span class="line">        interpreter = PDFPageInterpreter(manager, device)</span><br><span class="line"></span><br><span class="line">        num_page, num_image, num_curve, num_figure, num_TextBoxHorizontal = 0, 0, 0, 0, 0</span><br><span class="line"></span><br><span class="line">        # 循环遍历列表，每次处理一个page的内容</span><br><span class="line">        for page in pdfFile.get_pages():  # doc.get_pages() 获取page列表</span><br><span class="line">            num_page += 1  # 页面增一</span><br><span class="line">            interpreter.process_page(page)</span><br><span class="line">            # 接收该页面的LTPage对象</span><br><span class="line">            layout = device.get_result()</span><br><span class="line">            for content in layout:</span><br><span class="line">                print(content)</span><br><span class="line">                if isinstance(content, LTImage):  # 图片对象</span><br><span class="line">                    num_image += 1</span><br><span class="line">                if isinstance(content, LTCurve):  # 曲线对象</span><br><span class="line">                    num_curve += 1</span><br><span class="line">                if isinstance(content, LTFigure):  # figure对象</span><br><span class="line">                    num_figure += 1</span><br><span class="line"></span><br><span class="line">                # 也可以判断是否含有get_text()方法。图片之类的就没有</span><br><span class="line">                # if hasattr(out,&quot;get_text&quot;):</span><br><span class="line">                if isinstance(content, LTTextBoxHorizontal):</span><br><span class="line">                    with open(toPath, &quot;a&quot;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">                        str = content.get_text()</span><br><span class="line">                        # print(str)</span><br><span class="line">                        f.write(str)</span><br><span class="line"></span><br><span class="line">                if isinstance(content, LTImage):</span><br><span class="line">                    print(&quot;检测到图片&quot;)</span><br><span class="line">                    with open(image_path, &quot;wb&quot;) as f:</span><br><span class="line">                        im_name = content.name</span><br><span class="line">                        im_with = content.width</span><br><span class="line">                        im_height = content.height</span><br><span class="line">                        im_name = content.imagemask</span><br><span class="line">                try:</span><br><span class="line">                    save_image(content, num_page, images_folder)</span><br><span class="line">                    print(&quot;提取正常&quot;)</span><br><span class="line">                except Exception as e:</span><br><span class="line">                    print(&quot;图片提取异常&quot;, e)</span><br><span class="line">            print(&apos;对象数量：\n&apos;, &apos;页面数：%s\n&apos; % num_page, &apos;图片数：%s\n&apos; % num_image, &apos;曲线数：%s\n&apos; % num_curve, &apos;水平文本框：%s\n&apos;</span><br><span class="line">                  % num_TextBoxHorizontal)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__==&apos;__main__&apos;:</span><br><span class="line">    path = r&quot;Selenium 自动化爬虫.pdf&quot;  # 测试提取图片pdf </span><br><span class="line">to_path = r&quot;读取pdf文件03.txt&quot;</span><br><span class="line">image_path = r&quot;帅哥.png&quot;  # 这里只是提取报存一张，如果你是提取很多的话，这个得需要改一下</span><br><span class="line">get_read(path, to_path, image_path)</span><br></pre></td></tr></table></figure><h6 id="前面的代码都是经过我自己测试的，但写文章的时候稍有改动，但不影响运行，微薄之力，希望能够帮助到你"><a href="#前面的代码都是经过我自己测试的，但写文章的时候稍有改动，但不影响运行，微薄之力，希望能够帮助到你" class="headerlink" title="前面的代码都是经过我自己测试的，但写文章的时候稍有改动，但不影响运行，微薄之力，希望能够帮助到你"></a>前面的代码都是经过我自己测试的，但写文章的时候稍有改动，但不影响运行，微薄之力，希望能够帮助到你</h6><h4 id="感谢阅读！"><a href="#感谢阅读！" class="headerlink" title="感谢阅读！"></a>感谢阅读！</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言:下面的代码有注释，下面的也是参考别人的，但是忘记来源了，因为时间隔太久了，哪位小伙伴看到了，可以提一下链接&lt;/p&gt;&lt;h6 id=&quot;方法一，这个测试是有用的，fitz（要install-pymupdf）&quot;&gt;&lt;a href=&quot;#方法一，这个测试是有用的，fitz（要install-pymupdf）&quot; class=&quot;headerlink&quot; title=&quot;方法一，这个测试是有用的，fitz（要install pymupdf）&quot;&gt;&lt;/a&gt;方法一，这个测试是有用的，fitz（要install pymupdf）&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/usr/bin/python3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# @Time    : 2019/3/19 08:51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# @Author  : qizai&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# @File    : fetch_pdf_v1.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# @Software: PyCharm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import fitz  # pip3 install pymupdf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import re&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import os&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def get_image(path, pic_path):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;apos;&amp;apos;&amp;apos;从pdf中提取图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :param path: pdf的路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :param pic_path: 图片保存的路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :return: 无return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;apos;&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t0 = time.clock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 00、使用正则表达式查找PDF中的图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    checkXO = r&amp;quot;/Type(?= */XObject)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    checkIM = r&amp;quot;/Subtype(?= */Image)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 一、打开pdf，打印PDF的相关信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    doc = fitz.open(path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 图片计数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    imgcount = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lenXREF = doc._getXrefLength()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 打印PDF的信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;文件名:&amp;#123;&amp;#125;, 页数: &amp;#123;&amp;#125;, 对象: &amp;#123;&amp;#125;&amp;quot;.format(path, len(doc), lenXREF - 1))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 二、遍历PDF中的对象，遇到是图像才进行下一步，不然就continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for i in range(1, lenXREF):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        # 定义对象字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        # text = doc._getObjectString(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        text = doc._getXrefString(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        # print(text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        # continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isXObject = re.search(checkXO, text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        # 使用正则表达式查看是否是图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isImage = re.search(checkIM, text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        # 如果不是对象也不是图片，则continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if not isXObject or not isImage:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(&amp;quot;不是图片&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        imgcount += 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        # 根据索引生成图像&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pix = fitz.Pixmap(doc, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        # 根据pdf的路径生成图片的名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        new_name = path.replace(&amp;apos;\\&amp;apos;, &amp;apos;_&amp;apos;) + &amp;quot;_img&amp;#123;&amp;#125;.png&amp;quot;.format(imgcount)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        new_name = new_name.replace(&amp;apos;:&amp;apos;, &amp;apos;&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        # 三、将图像存为png格式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        # 如果pix.n&amp;lt;5,可以直接存为PNG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if pix.n &amp;lt; 5:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pix.writePNG(os.path.join(pic_path, new_name))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        # 否则先转换CMYK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        else:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pix0 = fitz.Pixmap(fitz.csRGB, pix)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pix0.writePNG(os.path.join(pic_path, new_name))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pix0 = None&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        # 释放资源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pix = None&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t1 = time.clock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;运行时间:&amp;#123;&amp;#125;s&amp;quot;.format(t1 - t0))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;提取了&amp;#123;&amp;#125;张图片&amp;quot;.format(imgcount))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 运行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if __name__==&amp;apos;__main__&amp;apos;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # pdf路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path = r&amp;quot;Selenium 自动化爬虫.pdf&amp;quot;  # 测试提取图片专用  Selenium 自动化爬虫&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pic_path = r&amp;quot;image&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 创建保存图片的文件夹&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if os.path.exists(pic_path):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;quot;文件夹已存在，请重新创建新文件夹！&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        raise SystemExit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        os.mkdir(pic_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    get_image(path, pic_path)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="PDF" scheme="http://yoursite.com/tags/PDF/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到七仔的个人博客</title>
    <link href="http://yoursite.com/2019/07/25/hello-world/"/>
    <id>http://yoursite.com/2019/07/25/hello-world/</id>
    <published>2019-07-25T13:33:09.000Z</published>
    <updated>2019-11-30T07:56:56.398Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo作者:欢迎使用 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! 这是首篇文章. 更多使用请看官方文档 <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> . 如果你在使用Hexo的过程中遇到一些问题, 那么你可以在 <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">这里找到解决方案</a> 或者你可以 <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>给我提问题，我会尽快回复您的.</p><h2 id="快速发布"><a href="#快速发布" class="headerlink" title="快速发布"></a>快速发布</h2><h3 id="创建一篇文章"><a href="#创建一篇文章" class="headerlink" title="创建一篇文章"></a>创建一篇文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>创建详情请看: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>服务详情请看: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>部署详情请看: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo作者:欢迎使用 &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! 这是首篇文章. 更多使用请看官方文档 &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; . 如果你在使用Hexo的过程中遇到一些问题, 那么你可以在 &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里找到解决方案&lt;/a&gt; 或者你可以 &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;给我提问题，我会尽快回复您的.&lt;/p&gt;&lt;h2 id=&quot;快速发布&quot;&gt;&lt;a href=&quot;#快速发布&quot; class=&quot;headerlink&quot; title=&quot;快速发布&quot;&gt;&lt;/a&gt;快速发布&lt;/h2&gt;&lt;h3 id=&quot;创建一篇文章&quot;&gt;&lt;a href=&quot;#创建一篇文章&quot; class=&quot;headerlink&quot; title=&quot;创建一篇文章&quot;&gt;&lt;/a&gt;创建一篇文章&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
