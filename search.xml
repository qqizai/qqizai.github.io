<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>刚刚创建的blog</title>
    <url>/2019/11/10/hello-world-1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>test</category>
        <category>分类2</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>标签2</tag>
        <tag>标签3</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>crack_woff</title>
    <url>/2019/08/26/crack-woff/</url>
    <content><![CDATA[<p>声明：本帖子仅是用于学习用途，请勿与用于恶意破坏别人网站，本人不承担法律责任。</p>
<p>来继续学爬虫呀！</p>
<h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><h6 id="简单描述一下这种手段，html源码的数字跟页面展示的数字是不一致的！当时就一脸黑人问号，嗯？？？"><a href="#简单描述一下这种手段，html源码的数字跟页面展示的数字是不一致的！当时就一脸黑人问号，嗯？？？" class="headerlink" title="简单描述一下这种手段，html源码的数字跟页面展示的数字是不一致的！当时就一脸黑人问号，嗯？？？"></a>简单描述一下这种手段，html源码的数字跟页面展示的数字是不一致的！当时就一脸黑人问号，嗯？？？</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">经过分析，当前这种字体反爬机制是：通过获取指定链接的woff字体文件，然后根据html源码的数字</span><br><span class="line">去woff字体文件里面查找真正的数字，讲到底就是一个映射关系/查找字典。如html源码是123，去woff文件里面</span><br><span class="line">查找出来的是：623。好了，看到这里，你一定想说：废话讲那么多干嘛？赶紧上教程啊！！</span><br></pre></td></tr></table></figure>
<h5 id="那先来看一下大致流程呗："><a href="#那先来看一下大致流程呗：" class="headerlink" title="那先来看一下大致流程呗："></a>那先来看一下大致流程呗：</h5><p><img src="https://img-blog.csdnimg.cn/20190826220504409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt=""></p>
<p>分析目标网站页面（在这里我不打算贴出网站地址，请大家自己找网站练习），这里看到html源码和页面展示的数字是不一致的，如下图：<br><img src="https://img-blog.csdnimg.cn/20190826220607308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tips：</span><br><span class="line">一开始不知道是怎么下手，只能谷歌搜索字体反爬，一搜果然很多说法，有说woff文件的、有说CSS的、还有说svg曲线啥的，</span><br><span class="line">然后我就去查看Network里面的All，就发现关键字眼woff，就开始猜测可能是属于这种类型的反爬手段，接着开始干活。</span><br></pre></td></tr></table></figure>
<h5 id="混淆前字体："><a href="#混淆前字体：" class="headerlink" title="混淆前字体："></a>混淆前字体：</h5><p><img src="https://img-blog.csdnimg.cn/20190826220646239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5 id="混淆后的字体："><a href="#混淆后的字体：" class="headerlink" title="混淆后的字体："></a>混淆后的字体：</h5><p><img src="https://img-blog.csdnimg.cn/20190826220711496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h6 id="找了一会，发现-woff2文件和woff文件前后不一样，然后开始着手解决"><a href="#找了一会，发现-woff2文件和woff文件前后不一样，然后开始着手解决" class="headerlink" title="找了一会，发现.woff2文件和woff文件前后不一样，然后开始着手解决"></a>找了一会，发现.woff2文件和woff文件前后不一样，然后开始着手解决</h6><p><a href="https://pan.baidu.com/s/1YT1MF1cMfULl4yrJHXPoyg" target="_blank" rel="noopener">如需下载woff文件，请点击这里</a>， 提取码: ghnx</p>
<h6 id="但是本地打不开woff字体文件，需要借助的软件是fontcreator，这个你自己去找一下，很多破解的"><a href="#但是本地打不开woff字体文件，需要借助的软件是fontcreator，这个你自己去找一下，很多破解的" class="headerlink" title="但是本地打不开woff字体文件，需要借助的软件是fontcreator，这个你自己去找一下，很多破解的"></a>但是本地打不开woff字体文件，需要借助的软件是fontcreator，这个你自己去找一下，很多破解的</h6><p><img src="https://img-blog.csdnimg.cn/20190826220739753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但是这好像看不出什么，然后我们接着需要从另外一方面下手，重点来了》==将woff文件转换为xml文件==<br>如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"></span><br><span class="line">base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://xxxxxx.xxx.woff"</span></span><br><span class="line">    </span><br><span class="line">woff_dir = os.path.join(base_dir, <span class="string">"statics/woffs/"</span>)</span><br><span class="line">file_name = url.split(<span class="string">"/"</span>)[<span class="number">-1</span>]</span><br><span class="line">xml_name = file_name.replace(file_name.split(<span class="string">"."</span>)[<span class="number">-1</span>], <span class="string">"xml"</span>)</span><br><span class="line">save_woff = os.path.join(woff_dir, file_name)</span><br><span class="line">save_xml = os.path.join(woff_dir, xml_name)</span><br><span class="line"></span><br><span class="line">resp = requests.get(url=<span class="string">"xxx"</span>)</span><br><span class="line"><span class="keyword">with</span> open(save_woff, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(resp.content)</span><br><span class="line">    f.close()</span><br><span class="line">font = TTFont(save_woff)</span><br><span class="line">font.saveXML(save_xml)  <span class="comment"># 转换为xml文件</span></span><br></pre></td></tr></table></figure></p>
<p>然后打开xml文件看，先来查看一下缩略的内容，红色圈圈的那两个是本次重点破解的分析的内容：<br><img src="https://img-blog.csdnimg.cn/20190822133456757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="主要涉及内容破解版块"></p>
<p>然后先查看cmap，发现线索，里面注释的地方有标注了。然后我们大胆猜测：NINE对应的name=cid00018，code=0x39，这翻译过来就是9对应的name=cid00018，其id标记为0x39：<br><img src="https://img-blog.csdnimg.cn/20190826220839525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>接着来看一下code=0x39，其对应的name=cid00018，然后我们拿这个cid00018去搜索，发现在<GlyphOrder>部分里面看到：<br><code>&lt;GlyphID id=&quot;3&quot; name=&quot;cid00018&quot;/&gt;</code>，这表明什么呢？结合前后两个映射关系，然后连起来再大胆猜测一下，可能是9对应3？<br><img src="https://img-blog.csdnimg.cn/20190826221219906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE3MzM3NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>为了验证这个猜想，继续再找一下其他例子，我使用已经转换为如下格式，方便你们对比，你们也可以从三张截图来对比，哪三张截图呢？分别是：①是前面包含“code=0x39，name=cid00018”的截图；②是包含“id=3，name=cid00018”的截图；③是文章的第二张截图。<br>你们可以①②截图来一个个列出映射关系，建议先列出①的映射关系，再列出②的映射关系，然后再将①、②的映射关系组合起来，得出一个新的映射关系，这个新的映射关系就是我们所需的，下面来给你们看一下我提取的①、②的映射关系：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">①的映射关系，在这里我定义为before_code_id</span><br><span class="line">②的映射关系，在这里我定义为affter_code_id,结果如下：</span><br><span class="line">before_code_id =  &#123;</span><br><span class="line">    &quot;0&quot;: &quot;cid00019&quot;,</span><br><span class="line">    &quot;1&quot;: &quot;cid00020&quot;,</span><br><span class="line">    &quot;2&quot;: &quot;cid00017&quot;,</span><br><span class="line">    &quot;3&quot;: &quot;cid00021&quot;,</span><br><span class="line">    &quot;4&quot;: &quot;cid00022&quot;,</span><br><span class="line">    &quot;5&quot;: &quot;cid00024&quot;,</span><br><span class="line">    &quot;6&quot;: &quot;cid00026&quot;,</span><br><span class="line">    &quot;7&quot;: &quot;cid00025&quot;,</span><br><span class="line">    &quot;8&quot;: &quot;cid00023&quot;,</span><br><span class="line">    &quot;9&quot;: &quot;cid00018&quot;</span><br><span class="line">&#125;</span><br><span class="line">affter_code_id = &#123;</span><br><span class="line">    &quot;cid00017&quot;: 2,</span><br><span class="line">    &quot;cid00018&quot;: 3,</span><br><span class="line">    &quot;cid00019&quot;: 4,</span><br><span class="line">    &quot;cid00020&quot;: 5,</span><br><span class="line">    &quot;cid00021&quot;: 6,</span><br><span class="line">    &quot;cid00022&quot;: 7,</span><br><span class="line">    &quot;cid00023&quot;: 8,</span><br><span class="line">    &quot;cid00024&quot;: 9,</span><br><span class="line">    &quot;cid00025&quot;: 10,</span><br><span class="line">    &quot;cid00026&quot;: 11</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">然后从html源码到before_code_id, affter_code_id应用起来就是如下：</span><br><span class="line">前端数字—中间人code—最终的数字，即：</span><br><span class="line">&quot;0&quot;——&quot;cid00019&quot;——4</span><br><span class="line">&quot;1&quot;——&quot;cid00020&quot;——5</span><br><span class="line">&quot;2&quot;——&quot;cid00017&quot;——2</span><br><span class="line">&quot;3&quot;——&quot;cid00021&quot;——6</span><br><span class="line">&quot;4&quot;——&quot;cid00022&quot;——7</span><br><span class="line">&quot;5&quot;——&quot;cid00024&quot;——9</span><br><span class="line">&quot;6&quot;——&quot;cid00026&quot;——11</span><br><span class="line">&quot;7&quot;——&quot;cid00025&quot;——10</span><br><span class="line">&quot;8&quot;——&quot;cid00023&quot;——8</span><br><span class="line">&quot;9&quot;——&quot;cid00018——3</span><br><span class="line"></span><br><span class="line">我们再简化一步，直接从html源码数字到最终的数字映射为如下(即直接省去中间的cidxxxxx这串)：</span><br><span class="line">&quot;0&quot;——4</span><br><span class="line">&quot;1&quot;——5</span><br><span class="line">&quot;2&quot;——2</span><br><span class="line">&quot;3&quot;——6</span><br><span class="line">&quot;4&quot;——7</span><br><span class="line">&quot;5&quot;——9</span><br><span class="line">&quot;6&quot;——11</span><br><span class="line">&quot;7&quot;——10</span><br><span class="line">&quot;8&quot;——8</span><br><span class="line">&quot;9&quot;——3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">但是你们发现这映射后的数字很奇怪吗，比如&quot;6&quot;、&quot;7&quot;映射之后分别为11和10，</span><br><span class="line">但是在我们的正常逻辑之中不对呀，要不我们再列一下html源码跟前端的肉眼看到的数字的映射关系呗：</span><br><span class="line">&quot;0&quot;——2</span><br><span class="line">&quot;1&quot;——3</span><br><span class="line">&quot;2&quot;——0</span><br><span class="line">&quot;3&quot;——4</span><br><span class="line">&quot;4&quot;——5</span><br><span class="line">&quot;5&quot;——7</span><br><span class="line">&quot;6&quot;——9</span><br><span class="line">&quot;7&quot;——8</span><br><span class="line">&quot;8&quot;——6</span><br><span class="line">&quot;9&quot;——1</span><br><span class="line">哇，这列出来之后不是很相似吗，跟前面的结果，要不我再放在一起给你们好对比一下呗：</span><br><span class="line">xml提取的映射     html源码跟网页展示的，提取的映射</span><br><span class="line">&quot;0&quot;——4				&quot;0&quot;——2</span><br><span class="line">&quot;1&quot;——5				&quot;1&quot;——3</span><br><span class="line">&quot;2&quot;——2				&quot;2&quot;——0</span><br><span class="line">&quot;3&quot;——6				&quot;3&quot;——4</span><br><span class="line">&quot;4&quot;——7				&quot;4&quot;——5</span><br><span class="line">&quot;5&quot;——9				&quot;5&quot;——7</span><br><span class="line">&quot;6&quot;——11				&quot;6&quot;——9</span><br><span class="line">&quot;7&quot;——10				&quot;7&quot;——8</span><br><span class="line">&quot;8&quot;——8				&quot;8&quot;——6</span><br><span class="line">&quot;9&quot;——3				&quot;9&quot;——1</span><br></pre></td></tr></table></figure>
<p>到此，我们发现从xml提取的映射跟html源码跟网页展示的提取的映射数值都是相差2，所以我们大胆猜测：网页上看到的数值是可以从xml提取的映射关系里面每个数字减去2所得的，即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;0&quot;——4-2=2</span><br><span class="line">&quot;1&quot;——5--2=3</span><br><span class="line">&quot;2&quot;——2-2=0</span><br><span class="line">&quot;3&quot;——6-2=4</span><br><span class="line">&quot;4&quot;——7-2=5</span><br><span class="line">&quot;5&quot;——9-2=7</span><br><span class="line">&quot;6&quot;——11-2=9</span><br><span class="line">&quot;7&quot;——10-2=8</span><br><span class="line">&quot;8&quot;——8-2=6</span><br><span class="line">&quot;9&quot;——3-2=1</span><br></pre></td></tr></table></figure>
<p>所以这就是破解了嘛，到此，这个教程总可以理解吧，写得辣么辛苦、改的辣么辛苦，赶快评论点赞收藏一套走起来</p>
<p>好了，别嗨了，实操才是王道，下面来看一下核心代码，如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : 2019/8/19 13:08</span><br><span class="line"># @Author  : qizai</span><br><span class="line"># @File    : crawl_woff.py</span><br><span class="line"># @Software: PyCharm</span><br><span class="line"></span><br><span class="line"># 先安装：pip3 install fontTools</span><br><span class="line">import os</span><br><span class="line">import requests</span><br><span class="line">from fake_useragent import UserAgent</span><br><span class="line">from fontTools.ttLib import TTFont  # 对字体文件进行格式转换</span><br><span class="line"></span><br><span class="line">base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">ua = UserAgent()</span><br><span class="line">header = &#123;</span><br><span class="line">    &quot;user-agent&quot;: ua.chrome,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def parse_woff(url=&quot;&quot;):</span><br><span class="line">    &quot;&quot;&quot;这里是下载字体并且解析对应的值&quot;&quot;&quot;</span><br><span class="line">    global cookie</span><br><span class="line">    global header</span><br><span class="line">    </span><br><span class="line">    woff_dir = os.path.join(base_dir, &quot;statics/woffs/&quot;)</span><br><span class="line">    file_name = url.split(&quot;/&quot;)[-1]</span><br><span class="line">    xml_name = file_name.replace(file_name.split(&quot;.&quot;)[-1], &quot;xml&quot;)</span><br><span class="line">    save_woff = os.path.join(woff_dir, file_name)</span><br><span class="line">    save_xml = os.path.join(woff_dir, xml_name)</span><br><span class="line"></span><br><span class="line">    if os.path.exists(save_woff):  # 存在本地的话直接提取本地的文件去解析即可省去下载，避免浪费资源</span><br><span class="line">        font = TTFont(save_woff)</span><br><span class="line">    else:</span><br><span class="line">        resp = requests.get(url=url, cookies=cookie, headers=header)</span><br><span class="line">        with open(save_woff, &quot;wb&quot;) as f:</span><br><span class="line">            f.write(resp.content)</span><br><span class="line">            f.close()</span><br><span class="line">        font = TTFont(save_woff)</span><br><span class="line">        font.saveXML(save_xml)  # 转换为xml文件</span><br><span class="line"></span><br><span class="line">    cmap = font.getBestCmap()  # 这个是xml源码里面的【数值-中间人code】映射，数值还不一定是html源码里面的数值，而是每位数经过加上一定的数值之后的</span><br><span class="line">    tmp = &#123;  # 这个是对应的才是我们需要的值,或者你也可以在每次获取的时候，将这个值对应减去48即可，就可以省去这这个映射</span><br><span class="line">        48: 0,  # html源码里面的0对应xml源码里面的48</span><br><span class="line">        49: 1,  # html源码里面的1对应xml源码里面的49</span><br><span class="line">        50: 2,  # html源码里面的2对应xml源码里面的50</span><br><span class="line">        51: 3,  # html源码里面的3对应xml源码里面的51</span><br><span class="line">        52: 4,  # html源码里面的4对应xml源码里面的52</span><br><span class="line">        53: 5,  # html源码里面的5对应xml源码里面的53</span><br><span class="line">        54: 6,  # html源码里面的6对应xml源码里面的54</span><br><span class="line">        55: 7,  # html源码里面的7对应xml源码里面的55</span><br><span class="line">        56: 8,  # html源码里面的8对应xml源码里面的56</span><br><span class="line">        57: 9,  # html源码里面的9对应xml源码里面的57</span><br><span class="line">    &#125;    # 注意：个人猜测以上这个tmp字典，xml源码的数字跟html源码数字的映射关系可能会定期改变的</span><br><span class="line"></span><br><span class="line">    before_code_id = &#123;&#125;  # 转换之后before_code_id为：1:cid00019  key就是html源码数字，value就是用来查询的中间人code</span><br><span class="line">    for k, v in cmap.items():</span><br><span class="line">        if k not in set(range(48, 58)):</span><br><span class="line">            continue</span><br><span class="line">        before_code_id[tmp.get(k)] = v  # 这一步其实是将49:cid00019的映射格式转换为好理解的1:cid00019映射关系</span><br><span class="line"></span><br><span class="line">    code_id_list = font.getGlyphOrder()[2:]  # 这个返回的值有11个，但是我这里只是取了第三个到最后一个，是用来取计算前端看到的真正的数值</span><br><span class="line">    affter_code_id = &#123;k:v for k,v in zip(code_id_list, range(2, 12))&#125;  # 将每一个按照顺序映射为cid00562:2这种</span><br><span class="line"></span><br><span class="line">    return before_code_id, affter_code_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    &quot;&quot;&quot;使用如下&quot;&quot;&quot;</span><br><span class="line">    before_code_id, affter_code_id = parse_woff(url=&quot;xxxx&quot;)</span><br><span class="line">    </span><br><span class="line">    # html源码数字：假设为0</span><br><span class="line">    html_number = 0</span><br><span class="line">    tmp_code = before_code_id.get(html_number)  # 先匹配中间人code</span><br><span class="line">    real_number = affter_code_id.get(tmp_code) - 2  # 再提取中间人code对应的真正的数字，记得要减去2，因为本来是每位数字已经多了2</span><br><span class="line">    print(&quot;当前html源码数字html_number:&#123;&#125; 真正的数字为real_number:&#123;&#125;&quot;.format(html_number, real_number))</span><br></pre></td></tr></table></figure></p>
<p>当前的woff字体反爬已经破解了，如果有不妥的地方请指出，大家一起学习。</p>
<h5 id="至此本文教程写完了，希望能够帮助到各位在爬虫路上的小伙伴们，觉得不错点个赞呗"><a href="#至此本文教程写完了，希望能够帮助到各位在爬虫路上的小伙伴们，觉得不错点个赞呗" class="headerlink" title="至此本文教程写完了，希望能够帮助到各位在爬虫路上的小伙伴们，觉得不错点个赞呗"></a>至此本文教程写完了，希望能够帮助到各位在爬虫路上的小伙伴们，觉得不错点个赞呗</h5><h5 id="感谢认真读完这篇教程的您"><a href="#感谢认真读完这篇教程的您" class="headerlink" title="感谢认真读完这篇教程的您"></a>感谢认真读完这篇教程的您</h5><p>先别走呗，这里有可能有你需要的文章：</p>
<blockquote>
<p><a href="https://blog.csdn.net/weixin_41173374/article/details/100053060" target="_blank" rel="noopener">CSS字体反爬实战，10分钟就能学会</a>；<br><a href="https://blog.csdn.net/weixin_41173374/article/details/99212145" target="_blank" rel="noopener">爬虫：js逆向目前遇到的知识点集合</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
        <category>爬虫</category>
        <category>反爬虫</category>
        <category>字体反爬</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>反爬虫</tag>
      </tags>
  </entry>
</search>
